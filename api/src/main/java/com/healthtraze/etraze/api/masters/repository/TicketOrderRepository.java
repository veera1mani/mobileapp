package com.healthtraze.etraze.api.masters.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.healthtraze.etraze.api.base.repository.BaseRepository;
import com.healthtraze.etraze.api.masters.dto.TransporterTicketDTO;
import com.healthtraze.etraze.api.masters.model.TicketOrder;

@Repository
public interface TicketOrderRepository extends BaseRepository<TicketOrder,String> {
	
	public Optional<TicketOrder> findByTicketId(String ticketId);
	
	public TicketOrder getByTicketId(String ticketId);
	
	@Query(value = "select * from  tbl_ticket_order o left join tbl_ticket_order_invoice i ON i.ticket_id=o.ticket_id where i.status='PICKED' AND o.tenant_id = :tenantId",nativeQuery = true)
	public List<TicketOrder> getAllOrders(@Param("tenantId") String tenantId);
	
	@Query(value = "select DISTINCT t.ticket_id,i.invoice_number,m.manufacturer_name,i.num_of_cases,t.status,tm.pin_code,ct.city_name AS location,tm.distribution_model,s.stockist_name,(select city_name from tbl_city WHERE city_code =s.city_id) as stockistLocation,t.stockist_id,i.priority,i.status AS invoiceStatus,i.pack_id,tr.transport_name,tm.multi_qr from  tbl_ticket_order_invoice i left join tbl_ticket t On i.ticket_id = t.ticket_id left join tbl_ticket_order o On o.ticket_id = i.ticket_id  left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id And tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code =tm.city_id  LEFT JOIN tbl_transport tr ON tr.transport_id =i.transporter where b.user_id=:userId And t.tenant_id =:tenantId  AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (t.type = 'order') AND  (i.status='PACKED' OR i.status='DISPATCHED' OR i.status='TRANSPORTER ASSIGNED') AND  (t.status='INVOICE CREATED' OR t.status='DISPATCHED') And i.invoice_number ILIKE %:search%",nativeQuery = true)
	public List<Object[]> getAllOrdersList(@Param("userId") String userId,@Param("tenantId") String tenantId,@Param("search") String search);
	
	@Query(value = "select DISTINCT t.ticket_id,i.invoice_number,m.manufacturer_name,i.num_of_cases,t.status,tm.pin_code,ct.city_name AS location,tm.distribution_model,s.stockist_name,(select city_name from tbl_city WHERE city_code =s.city_id) as stockistLocation,t.stockist_id,i.priority,i.status AS invoiceStatus,i.pack_id,i.vehicale_no,tr.transport_name from  tbl_ticket_order_invoice i left join tbl_ticket t On i.ticket_id = t.ticket_id left join tbl_ticket_order o On o.ticket_id = i.ticket_id  left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id And tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code =tm.city_id left join tbl_transport tr ON tr.transport_id =i.transporter where b.user_id=:userId And t.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (t.type = 'order') AND  (i.status='TRANSPORTER ASSIGNED') AND  (t.status='INVOICE CREATED' OR t.status='DISPATCHED') And i.invoice_number ILIKE %:search%",nativeQuery = true)
	public List<Object[]> getAllTransporterAssignedOrders(@Param("userId") String userId,@Param("tenantId") String tenantId,@Param("search") String search);
	
	@Query(value = "select DISTINCT t.ticket_id,i.invoice_number,m.manufacturer_name,i.num_of_cases,t.status,tm.pin_code,ct.city_name AS location,tm.distribution_model,s.stockist_name,(select city_name from tbl_city WHERE city_code =s.city_id ) as stockistLocation,t.stockist_id,i.priority,i.status AS invoiceStatus,i.pack_id from  tbl_ticket_order_invoice i left join tbl_ticket t On i.ticket_id = t.ticket_id left join tbl_ticket_order o On o.ticket_id = i.ticket_id  left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id And tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code =tm.city_id   where b.user_id=:userId And s.city_id =:search And t.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (t.type = 'order') AND  (i.status='PACKED') AND  (t.status='INVOICE CREATED' OR t.status='DISPATCHED') and  s.city_id =:search ",nativeQuery = true)
	public List<Object[]> getAllPackedOrdersList(@Param("userId") String userId,@Param("tenantId") String tenantId,@Param("search") String search);
	
	@Query(value = "select DISTINCT t.ticket_id,i.invoice_number,m.manufacturer_name,i.num_of_cases,t.status,tm.pin_code,ct.city_name AS location,tm.distribution_model,s.stockist_name,(select city_name from tbl_city WHERE city_code =s.city_id) as stockistLocation,t.stockist_id,i.priority,i.status AS invoiceStatus,i.pack_id from  tbl_ticket_order_invoice i left join tbl_ticket t On i.ticket_id = t.ticket_id left join tbl_ticket_order o On o.ticket_id = i.ticket_id  left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id And tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code =tm.city_id   where b.user_id=:userId And t.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (t.type = 'order') AND  (i.status='PACKED') AND  (t.status='INVOICE CREATED' OR t.status='DISPATCHED')",nativeQuery = true)
	public List<Object[]> getAllPackedOrdersList(@Param("userId") String userId,@Param("tenantId") String tenantId);
	
	@Query(value = "SELECT COALESCE(SUM(CAST(i.num_of_cases AS integer)), 0) FROM tbl_ticket_order_invoice i LEFT JOIN tbl_ticket t ON i.ticket_id = t.ticket_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = i.ticket_id LEFT JOIN tbl_manager_manufacturer_mapping b ON t.manufacturer_id = b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id AND tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code = tm.city_id WHERE b.user_id =:userId  AND t.tenant_id =:tenantId AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND t.type = 'order' AND i.status = 'PACKED' AND (t.status = 'INVOICE CREATED' OR t.status = 'DISPATCHED') AND s.city_id ILike %:location%",nativeQuery = true)
	public String getAllPackedOrdersTotalCases( String userId, String tenantId, String location);
	
	@Query(value = "select DISTINCT t.ticket_id,i.invoice_number,m.manufacturer_name,i.num_of_cases,i.status,tm.pin_code,ct.city_name AS location,tm.distribution_model,s.stockist_name,(select city_name from tbl_city WHERE city_code =s.city_id) as stockistLocation  from  tbl_ticket_order_invoice i left join tbl_ticket t On i.ticket_id = t.ticket_id left join tbl_ticket_order o On o.ticket_id = i.ticket_id  left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id And tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code =tm.city_id   where b.user_id=:userId And t.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (t.type = 'order') AND (i.status='INVOICE CREATED' OR i.status='PICKED' OR i.status='CHECKED') And i.invoice_number ILIKE %:search%",nativeQuery = true)
	public List<Object[]> getAllOrdersListInvoiceQR(@Param("userId") String userId,@Param("tenantId") String tenantId,@Param("search") String search,Pageable pageable);
	
	@Query(value = "select DISTINCT t.ticket_id,i.invoice_number,m.manufacturer_name,i.num_of_cases,i.status,tm.pin_code,ct.city_name AS location,tm.distribution_model,s.stockist_name,(select city_name from tbl_city WHERE city_code =s.city_id) as stockistLocation  from  tbl_ticket_order_invoice i left join tbl_ticket t On i.ticket_id = t.ticket_id left join tbl_ticket_order o On o.ticket_id = i.ticket_id  left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id And tm.tenant_id =:tenantId LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_city ct ON city_code =tm.city_id   where b.user_id=:userId And t.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (t.type = 'order') AND (i.status='INVOICE CREATED' OR i.status='PICKED' OR i.status='CHECKED') And i.invoice_number ILIKE %:search%",nativeQuery = true)
	public List<Object[]> getAllOrdersListInvoiceQR(@Param("userId") String userId,@Param("tenantId") String tenantId,@Param("search") String search);
	


	@Query(value="SELECT t.ticket_id as ticketId,t.subject as subject,t.status as status,t.type as type,t.emailed_by as emailedBy,t.stockist_id as stockistId,t.assigned_on as assignedOn,tto.transporter as transporter,toi.invoice_number as invoiceNumber,toi.line_item as lineItem FROM tbl_ticket t  LEFT JOIN tbl_ticket_order AS tto ON t.ticket_id = tto.ticket_id LEFT JOIN tbl_ticket_order_invoice AS toi ON t.ticket_id = toi.ticket_id WHERE t.type='order' AND t.tenant_id=:tenantId AND tto.transporter IS NOT NULL",nativeQuery = true)
	List<TransporterTicketDTO> findOrdersByTenantId(String tenantId);

	@Query(value="SELECT t.ticket_id as ticketId,t.subject as subject,t.status as status,t.type as type,t.emailed_by as emailedBy,t.stockist_id as stockistId,t.assigned_on as assignedOn,tto.transporter as transporter,toi.invoice_number as invoiceNumber,toi.line_item as lineItem FROM tbl_ticket t  LEFT JOIN tbl_ticket_order AS tto ON t.ticket_id = tto.ticket_id LEFT JOIN tbl_ticket_order_invoice AS toi ON t.ticket_id = toi.ticket_id WHERE t.type='order' AND t.tenant_id=:tenantId AND tto.transporter=:transportId",nativeQuery = true)
	List<TransporterTicketDTO> findOrdersByTransporterId(String tenantId, String transportId);
	
	@Query(value = "SELECT DISTINCT o.ticket_id,  o.created_by,  o.created_on,  o.modified_by,  o.modified_on,  o.tenant_id,  o.version_no,  o.customer_ref_number,  o.pod_required,  o.remarks,  o.transporter,o.vehicale_no, o.is_created, o.num_of_cases, o.is_created, o.transportar_name, o.ccd_required, o.lr_document, o.lr_number, o.lr_recieve_date FROM tbl_ticket_order o left join tbl_ticket a left join  tbl_manager_manufacturer_mapping b on a.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = a.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = a.manufacturer_id and tm.tenant_id = a.tenant_id where b.user_id=:userId And a.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' And (a.type = 'order')", nativeQuery = true)
	public List<TicketOrder> getByOrderManager(@Param("userId") String userId,@Param("tenantId") String tenantId);
	
	@Query(value = "SELECT DISTINCT i.invoice_number,t.ticket_id,o.customer_ref_number,t.stockist_id,t.created_on,t.status AS tStatus,i.status AS iStatus,i.priority FROM tbl_ticket_order_invoice i LEFT JOIN tbl_ticket_order o ON i.ticket_id = o.ticket_id LEFT JOIN   tbl_ticket t ON t.ticket_id = i.ticket_id left join  tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and tm.tenant_id = t.tenant_id  where b.user_id=:userId And t.tenant_id = :tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' AND t.status='INVOICE CREATED' and i.status ILIKE %:status% And (t.type = 'order')", nativeQuery = true)
	public List<Object[]> allOrderMobileByManager(@Param("userId") String userId, @Param("tenantId") String tenantId , @Param("status") String status);
	
	@Query(value = "SELECT DISTINCT i.invoice_number,t.ticket_id,o.customer_ref_number,t.stockist_id,t.created_on,t.status AS tStatus,i.status AS iStatus,i.priority FROM tbl_ticket_order_invoice i LEFT JOIN tbl_ticket_order o ON i.ticket_id = o.ticket_id LEFT JOIN tbl_ticket t ON t.ticket_id = i.ticket_id left join tbl_manager_manufacturer_mapping b on t.manufacturer_id =b.manufacturerid LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and tm.tenant_id = t.tenant_id where t.assigned_to=:userId And t.tenant_id =:tenantId AND m.status = 'ACTIVE' and tm.status='ACTIVE' AND t.status='INVOICE CREATED' and i.status ILIKE %:status% And (t.type = 'order')", nativeQuery = true)
	public List<Object[]> allOrderMobileByUser(@Param("userId") String userId, @Param("tenantId") String tenantId, @Param("status") String status);

}
