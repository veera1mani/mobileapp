package com.healthtraze.etraze.api;

import java.util.Date;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.healthtraze.etraze.api.base.constant.Constants;
import com.healthtraze.etraze.api.base.constant.StringIteration;
import com.healthtraze.etraze.api.base.util.ConfigUtil;
import com.healthtraze.etraze.api.security.model.SendMail;
import com.healthtraze.etraze.api.security.repository.EmailRepository;


@Service
public class EmailNotification implements NotificationInf {

	private EmailRepository emailRepository;
	
	@Autowired
	public EmailNotification(EmailRepository emailRepository) {
		this .emailRepository = emailRepository;
	}
	
	private static Logger logger = LogManager.getLogger(EmailNotification.class);
	
	@Override
	public void doNotification(Object object) {
		SendMail emailData = (SendMail) object;
		try {
			 // Put senderâ€™s address
			 String from = Constants.MAILUSERNAME;
			 final String username = Constants.MAILUSERNAME;//username generated by Pepipost
			 final String password = StringIteration.MAILPASSWORD;//password generated by Pepipost
			 // Paste host address from the SMTP relay tab in Integrations from your Pepipost App
			 Properties props = new Properties();
			 props.put("mail.smtp.auth", Constants.TRUE);
			 logger.info(" Constants.TRUE-->"+ Constants.TRUE);
			 props.put("mail.smtp.starttls.enable", Constants.TRUE);
			 props.put("mail.smtp.host", Constants.HOST);
			 logger.info("Constants.HOST-->"+Constants.HOST);
			 props.put("mail.smtp.port", Constants.SMTPPORT);
			 props.put("mail.smtp.ssl.protocols", Constants.SSLPORTOCAL);
			 // Get the Session object.
			 Session session = Session.getInstance(props,
			 new javax.mail.Authenticator() {
			 @Override
			 protected PasswordAuthentication getPasswordAuthentication() {
			 return new PasswordAuthentication(username, password);
			 }
			 });
			 session.setDebug(true);
		
			 // Create a default MimeMessage object.
			 Message message = new MimeMessage(session);
			 // Set From: header field
			 message.setFrom(new InternetAddress(from));
			 // Set To: header field
			 
			 
			 InternetAddress[] list = new InternetAddress[emailData.getTo().length];
				
				for (int i = 0; i < emailData.getTo().length; i++) {
					 list[i] = new InternetAddress(emailData.getTo()[i]);
					
				}
			 message.setRecipients(Message.RecipientType.TO,list);
			 // Set Subject: header field
			 message.setSubject(emailData.getSubject());
			 // Put the content of your message
			 message.setContent(emailData.getMessage(),"text/html");
			 // Send message
			 logger.info("Sending msg");
			 String host=Constants.HOST;
			 Transport trans =session.getTransport("smtp");
			 trans.connect(host, 587, username, password);
			 trans.sendMessage(message, message.getAllRecipients());
			 trans.removeConnectionListener(null);
			 trans.close();
			 logger.info("Sent message successfully....");
			emailData.setStatus(Constants.SEND);
			emailData.setDeliverDate(new Date());
			emailRepository.save(emailData);
			 
		} catch (Exception e) {
			
			if(ConfigUtil.getEmailRetryCount() >= emailData.getRetryCount() ) {
				logger.info(" Constants.TRUE-->"+ Constants.TRUE);
				logger.info("Constants.HOST-->"+Constants.HOST);
				emailData.setStatus(Constants.RETRY);
			}else {
				emailData.setStatus(Constants.FAILED);
			}
			emailRepository.save(emailData);
			logger.error(e);
			e.printStackTrace();
		}
	}
}
