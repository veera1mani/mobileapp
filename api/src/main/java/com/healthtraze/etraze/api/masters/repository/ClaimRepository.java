package com.healthtraze.etraze.api.masters.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.healthtraze.etraze.api.masters.model.Claim;

@Repository
public interface ClaimRepository extends JpaRepository<Claim, String> {

	@Query(value = "SELECT MAX(CAST(SUBSTRING(claim_id FROM LENGTH('CL')+1) AS INTEGER)) AS lastSequence FROM tbl_claims", nativeQuery = true)
	public Integer getLastSequence();

	Optional<Claim> findByClaimNumber(String claimNumber);

	@Query(value = "select * from tbl_claims where tenant_id =:tenantId AND stockist_id=:userId AND claim_number=:claimNumber", nativeQuery = true)
	public Optional<Claim> findClaims(String tenantId, String userId, String claimNumber);

	@Query(value = "select * from tbl_claims where tenant_id =:tenantId AND claim_id=:claimId", nativeQuery = true)
	public Optional<Claim> findById(String tenantId, String claimId);

	@Query(value = "SELECT distinct c.claim_id, c.docname , c.created_by, c.created_on,c.claim_date, c.modified_by, c.modified_on, c.tenant_id, c.version_no,c.claim_number, c.document, c.status, c.stockist_id, c.manufacturer, c.manufacturer_id, c.received_date "
			+ " FROM  tbl_claims c  left join tbl_manufacturer m on m.manufacturer_id = m.manufacturer_id left join tbl_tenant_manufacture  tm on c.manufacturer_id = tm.manufacturer_id  WHERE c.stockist_id=:stockistId and m.status ='ACTIVE' and tm.status='ACTIVE' and (c.claim_id ILIKE %:search% OR c.claim_number ILIKE %:search% OR CAST(c.claim_date AS TEXT) ILIKE %:search% OR m.manufacturer_name ILIKE %:search% OR c.status ILIKE %:search% OR CAST(c.received_date AS TEXT) ILIKE %:search%) AND c.tenant_id=:tenantId", nativeQuery = true)
	public List<Claim> findAllClaimesByTenant(@Param("stockistId") String stockistId, @Param("search") String search,
			Pageable paging, @Param("tenantId") String tenantId);

	@Query(value = "SELECT distinct c.claim_id, c.docname , c.created_by, c.created_on,c.claim_date, c.modified_by, c.modified_on, c.tenant_id, c.version_no,c.claim_number, c.document, c.status, c.stockist_id, c.manufacturer, c.manufacturer_id, c.received_date "
			+ " FROM  tbl_claims c  left join tbl_manufacturer m on m.manufacturer_id =m.manufacturer_id left join tbl_tenant_manufacture  tm on c.manufacturer_id = tm.manufacturer_id  WHERE c.stockist_id=:stockistId and m.status ='ACTIVE' and tm.status='ACTIVE' and (c.claim_id ILIKE %:search% OR c.claim_number ILIKE %:search% OR CAST(c.claim_date AS TEXT) ILIKE %:search% OR m.manufacturer_name ILIKE %:search% OR c.status ILIKE %:search% OR CAST(c.received_date AS TEXT) ILIKE %:search%) AND c.tenant_id=:tenantId", nativeQuery = true)
	public List<Claim> findAllClaimesByTenantId(@Param("stockistId") String stockistId, @Param("search") String search,
			@Param("tenantId") String tenantId);

	@Query(value = "SELECT distinct r.serial_number, r.claim_number, r.claim_type, r.status, r.received_date, s.stockist_name, s.city_id "
			+ "FROM tbl_returns r "
			+ "LEFT JOIN tbl_stockist s ON r.stockist_id = s.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id left join tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture left join tbl_manufacturer m ON m.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = tm.manufacturer_id "
			+ "WHERE r.tenant_id = :tenantId and mp.user_id =:userId and  tm.status = 'ACTIVE' and m.status = 'ACTIVE' "
			+ "and r.status ILIKE %:status% and r.claim_number ILIKE %:claimNumber% and s.stockist_name ILIKE %:stockist% and s.city_id ILIKE %:location% group by r.serial_number, r.claim_number, r.claim_type, r.status, r.received_date, s.stockist_name, s.city_id  ", nativeQuery = true)
	List<Object[]> claimsStatusReport(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("status") String status, @Param("claimNumber") String claimNumber,
			@Param("stockist") String stockist, @Param("location") String location);

	@Query(value = "select * from tbl_claims t where tenant_id=:tenantId AND isenable=true AND"
			+ "(t.claim_id ILIKE %:value% OR " + "t.claim_number ILIKE %:value% OR " + "t.status ILIKE %:value% OR "
			+ "t.manufacturer ILIKE %:value%)", nativeQuery = true)
	public List<Claim> findAllStockistByTenantId(Pageable pageable, @Param(value = "tenantId") String id,
			@Param(value = "value") String value);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN (r.status='RECEIVED' OR r.status='PENDING'or r.status='GRRN_CREATED' or  r.status = 'CN_CREATED') THEN 1 ELSE 0 END), 0) AS count, "
			+ "COALESCE(SUM(CASE WHEN rn.note_type = 'CN' THEN CAST(rn.note_number AS INT) ELSE 0 END), 0) AS amount, "
			+ "COALESCE(SUM(CASE WHEN r.status='RECEIVED' THEN 1 ELSE 0 END), 0) AS received, "
			+ "COALESCE(SUM(CASE WHEN r.status='CHECKED' THEN 1 ELSE 0 END), 0) AS firstCheck, "
			+ "COALESCE(SUM(CASE WHEN r.status='GRRN_CREATED' THEN 1 ELSE 0 END), 0) AS grrn, "
			+ "COALESCE(SUM(CASE WHEN r.status='CHECKED II' THEN 1 ELSE 0 END), 0) AS secondCheck, "
			+ "COALESCE(SUM(CASE WHEN r.status='CN_CREATED' THEN 1 ELSE 0 END), 0) AS cn, "
			+ "COALESCE(SUM(CASE WHEN r.status='HO' THEN 1 ELSE 0 END), 0) AS ho " + "FROM tbl_returns r "
			+ "LEFT JOIN tbl_return_note rn ON r.return_id = rn.return_id left JOIN tbl_claims c on c.claim_number = r.claim_number left join tbl_manager_manufacturer_mapping mp on mp.manufacturerid =r.manufacturer  left join tbl_manufacturer m ON mp.manufacturerid = m.manufacturer_id left JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   "
			+ "WHERE r.tenant_id = :tenantId and m.status = 'ACTIVE' and tm.status='ACTIVE' and mp.user_id =:userId AND  "
			+ "(r.created_on >=:startDate AND r.created_on <=:endDate)", nativeQuery = true)
	List<Object[]> claimOverviewReport(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

	@Query(value = "select * from tbl_claims where tenant_id =:tenantId AND stockist_id=:userId", nativeQuery = true)
	public List<Claim> findClaims(String tenantId, String userId);

	@Query(value = "SELECT RIGHT(claim_id,2) FROM tbl_claims where tenant_id =:tenantId AND created_on=CURRENT_DATE ORDER BY claim_id DESC limit 1", nativeQuery = true)
	public String getLastSequence(String tenantId);

	
	@Query(value = "SELECT s.stockist_name, s.city_id,sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers, sm.location,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date FROM tbl_returns r LEFT JOIN tbl_stockist s ON r.stockist_id = s.stockist_id LEFT JOIN tbl_transport tr ON tr.transport_id = r.transporter_id LEFT JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id AND sm.manufacture = r.manufacturer LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id = r.tenant_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = r.manufacturer LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = tm.manufacturer_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS GRRN_Dates, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS GRRN_Amounts, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN note_number ELSE NULL END, ', ') AS GRRN_Numbers FROM tbl_return_note GROUP BY return_id) grrn_data ON grrn_data.return_id = r.return_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS CN_Dates, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS CN_Amounts, STRING_AGG(CASE WHEN note_type = 'CN' THEN note_number ELSE NULL END, ', ') AS CN_Numbers FROM tbl_return_note GROUP BY return_id) cn_data ON cn_data.return_id = r.return_id WHERE r.tenant_id =:tenantId AND mp.user_id =:userId AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE'  GROUP BY s.stockist_name, s.city_id, sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, sm.location, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date ", nativeQuery = true)
	List<Object[]> returnsDetatilReport(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT s.stockist_name, s.city_id,sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers, sm.location,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date FROM tbl_returns r LEFT JOIN tbl_stockist s ON r.stockist_id = s.stockist_id LEFT JOIN tbl_transport tr ON tr.transport_id = r.transporter_id LEFT JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id AND sm.manufacture = r.manufacturer LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id = r.tenant_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = r.manufacturer LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = tm.manufacturer_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS GRRN_Dates, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS GRRN_Amounts, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN note_number ELSE NULL END, ', ') AS GRRN_Numbers FROM tbl_return_note GROUP BY return_id) grrn_data ON grrn_data.return_id = r.return_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS CN_Dates, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS CN_Amounts, STRING_AGG(CASE WHEN note_type = 'CN' THEN note_number ELSE NULL END, ', ') AS CN_Numbers FROM tbl_return_note GROUP BY return_id) cn_data ON cn_data.return_id = r.return_id WHERE r.tenant_id =:tenantId AND mp.user_id =:userId AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE'  AND  EXTRACT(MONTH FROM r.received_date) =:month and EXTRACT(YEAR FROM r.received_date) = EXTRACT(YEAR FROM CURRENT_DATE)   GROUP BY s.stockist_name, s.city_id, sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, sm.location, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date", nativeQuery = true)
	List<Object[]> returnsDetatilReportMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);

	@Query(value = "SELECT  r.claim_number, s.stockist_name,  r.created_on, EXTRACT(DAY FROM AGE(CURRENT_DATE, r.created_on)), m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location  FROM tbl_returns r  left JOIN tbl_stockist s ON r.stockist_id = s.stockist_id left JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id and sm.manufacture=r.manufacturer  left join tbl_tenant_manufacture tm ON tm.manufacturer_id = r.manufacturer and r.tenant_id=tm.tenant_id  left join tbl_manufacturer m ON m.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = tm.manufacturer_id   WHERE r.tenant_id =:tenantId and mp.user_id =:userId and  tm.status = 'ACTIVE' and m.status = 'ACTIVE' and r.status='PENDING' group by r.claim_number,s.stockist_name, r.created_on,  m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location ", nativeQuery = true)
	List<Object[]> claimsNotReceievd(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT  r.claim_number, s.stockist_name,  r.created_on, EXTRACT(DAY FROM AGE(CURRENT_DATE, r.created_on)), m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location  FROM tbl_returns r  left JOIN tbl_stockist s ON r.stockist_id = s.stockist_id left JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id and sm.manufacture=r.manufacturer  left join tbl_tenant_manufacture tm ON tm.manufacturer_id = r.manufacturer and r.tenant_id=tm.tenant_id  left join tbl_manufacturer m ON m.manufacturer_id = sm.manufacture  WHERE r.tenant_id =:tenantId  and  tm.status = 'ACTIVE' and m.status = 'ACTIVE' and r.status='PENDING' group by r.claim_number,s.stockist_name, r.created_on,  m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location ", nativeQuery = true)
	List<Object[]> claimsNotReceievdSuper(@Param("tenantId") String tenantId);

	@Query(value = "SELECT  r.claim_number, s.stockist_name,  r.created_on, EXTRACT(DAY FROM AGE(CURRENT_DATE, r.created_on)), m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location  FROM tbl_returns r  left JOIN tbl_stockist s ON r.stockist_id = s.stockist_id left JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id and sm.manufacture=r.manufacturer  left join tbl_tenant_manufacture tm ON tm.manufacturer_id = r.manufacturer and r.tenant_id=tm.tenant_id  left join tbl_manufacturer m ON m.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = tm.manufacturer_id   WHERE r.tenant_id =:tenantId and mp.user_id =:userId and  tm.status = 'ACTIVE' and m.status = 'ACTIVE' and r.status='PENDING'   AND EXTRACT(MONTH FROM r.created_on) =:month  group by r.claim_number,s.stockist_name, r.created_on,  m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location ", nativeQuery = true)
	List<Object[]> claimsNotReceievdMonth(@Param("tenantId") String tenantId, @Param("userId") String userId, int month);

	@Query(value = "SELECT  r.claim_number, s.stockist_name,  r.created_on, EXTRACT(DAY FROM AGE(CURRENT_DATE, r.created_on)), m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location  FROM tbl_returns r  left JOIN tbl_stockist s ON r.stockist_id = s.stockist_id left JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id and sm.manufacture=r.manufacturer  left join tbl_tenant_manufacture tm ON tm.manufacturer_id = r.manufacturer and r.tenant_id=tm.tenant_id  left join tbl_manufacturer m ON m.manufacturer_id = r.manufacturer    WHERE r.tenant_id =:tenantId  and  tm.status = 'ACTIVE' and m.status = 'ACTIVE' and r.status='PENDING'   AND EXTRACT(MONTH FROM r.created_on) =:month  group by r.claim_number,s.stockist_name, r.created_on,  m.manufacturer_name, r.status,s.city_id, sm.sap_id,sm.location ", nativeQuery = true)
	List<Object[]> claimsNotReceievdMonthSuper(@Param("tenantId") String tenantId, 
			int month);

	@Query(value = "SELECT s.stockist_name, s.city_id,sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers, sm.location,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date FROM tbl_returns r LEFT JOIN tbl_stockist s ON r.stockist_id = s.stockist_id LEFT JOIN tbl_transport tr ON tr.transport_id = r.transporter_id LEFT JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id AND sm.manufacture = r.manufacturer LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id = r.tenant_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = r.manufacturer  LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS GRRN_Dates, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS GRRN_Amounts, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN note_number ELSE NULL END, ', ') AS GRRN_Numbers FROM tbl_return_note GROUP BY return_id) grrn_data ON grrn_data.return_id = r.return_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS CN_Dates, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS CN_Amounts, STRING_AGG(CASE WHEN note_type = 'CN' THEN note_number ELSE NULL END, ', ') AS CN_Numbers FROM tbl_return_note GROUP BY return_id) cn_data ON cn_data.return_id = r.return_id WHERE r.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE'  GROUP BY s.stockist_name, s.city_id, sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, sm.location, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date", nativeQuery = true)
	List<Object[]> returnsDetatilReportSuper(@Param("tenantId") String tenantId);

	@Query(value = "SELECT s.stockist_name, s.city_id,sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers, sm.location,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date FROM tbl_returns r LEFT JOIN tbl_stockist s ON r.stockist_id = s.stockist_id LEFT JOIN tbl_transport tr ON tr.transport_id = r.transporter_id LEFT JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id AND sm.manufacture = r.manufacturer LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id = r.tenant_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = r.manufacturer  LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS GRRN_Dates, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS GRRN_Amounts, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN note_number ELSE NULL END, ', ') AS GRRN_Numbers FROM tbl_return_note GROUP BY return_id) grrn_data ON grrn_data.return_id = r.return_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS CN_Dates, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS CN_Amounts, STRING_AGG(CASE WHEN note_type = 'CN' THEN note_number ELSE NULL END, ', ') AS CN_Numbers FROM tbl_return_note GROUP BY return_id) cn_data ON cn_data.return_id = r.return_id WHERE r.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE'  AND EXTRACT(MONTH FROM r.received_date) =:month and EXTRACT(YEAR FROM r.received_date) = EXTRACT(YEAR FROM CURRENT_DATE)   GROUP BY s.stockist_name, s.city_id, sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, sm.location, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers,r.lr_booking_date, r.lr_number,number_of_boxes,r.claim_date", nativeQuery = true)
	List<Object[]> returnsDetatilReportSuperMonth(@Param("tenantId") String tenantId,int month);

	@Query(value = "SELECT s.stockist_name, s.city_id,sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers, sm.location FROM tbl_returns r LEFT JOIN tbl_stockist s ON r.stockist_id = s.stockist_id LEFT JOIN tbl_transport tr ON tr.transport_id = r.transporter_id LEFT JOIN tbl_stockist_manufacture sm ON s.stockist_id = sm.stockist_id AND sm.manufacture = r.manufacturer LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id = r.tenant_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = r.manufacturer LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = tm.manufacturer_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS GRRN_Dates, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS GRRN_Amounts, STRING_AGG(CASE WHEN note_type = 'GRRN' THEN note_number ELSE NULL END, ', ') AS GRRN_Numbers FROM tbl_return_note GROUP BY return_id) grrn_data ON grrn_data.return_id = r.return_id LEFT JOIN (SELECT return_id, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(created_on AS TEXT) ELSE NULL END, ', ') AS CN_Dates, STRING_AGG(CASE WHEN note_type = 'CN' THEN CAST(line_item AS TEXT) ELSE NULL END, ', ') AS CN_Amounts, STRING_AGG(CASE WHEN note_type = 'CN' THEN note_number ELSE NULL END, ', ') AS CN_Numbers FROM tbl_return_note GROUP BY return_id) cn_data ON cn_data.return_id = r.return_id WHERE r.tenant_id =:tenantId AND mp.user_id =:userId AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE'  AND s.city_id ILIKE %:location%  and r.status='CN_CREATED' GROUP BY s.stockist_name, s.city_id, sm.sap_id, r.claim_number, r.received_date, r.status, r.claim_type, m.manufacturer_name, tr.transport_name, sm.location, grrn_data.GRRN_Dates, cn_data.CN_Dates, grrn_data.GRRN_Amounts, cn_data.CN_Amounts, grrn_data.GRRN_Numbers, cn_data.CN_Numbers ", nativeQuery = true)
	List<Object[]> returnsDetatilReportCnCreated(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("location") String location);

}