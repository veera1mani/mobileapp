package com.healthtraze.etraze.api.masters.repository;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.healthtraze.etraze.api.masters.model.Ticket;
import com.healthtraze.etraze.api.report.model.OrderReport;

@Repository
public interface TicketReportRepository extends TicketRepository {

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on as invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken ,t.ticket_id,tr.invoice_value  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'   ", nativeQuery = true)

	List<Object[]> orderDetailsReport(@Param("tenantId") String tenantId, @Param("userId") String userId);
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on as invoiceDate ,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id,tr.invoice_value  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and t.type='order'    and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month ", nativeQuery = true)

	List<Object[]> orderDetailsReportMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);


	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on as invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400) END,t.ticket_id,tr.invoice_value  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and t.type='order'    and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and ot.pod_required ='true' and  m.manufacture_name ILIKE %:manufacturer%  ", nativeQuery = true)

	List<Object[]> orderDetailsReportPod(@Param("tenantId") String tenantId, @Param("userId") String userId,String manufacturer);
	
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on as invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id,tr.invoice_value  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and t.type='order'    and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and ot.pod_required ='true' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month and  m.manufacture_name ILIKE %:manufacturer%  ", nativeQuery = true)

	List<Object[]> orderDetailsReportPodMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month,String manufacturer);



	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date  AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken,t.ticket_id  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id  left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and t.assigned_to=:userId and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and ot.pod_required ='true' and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)

	List<Object[]> orderDetailsReportPodUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("manufacturer") String manufacturer);

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id,tr.invoice_value  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and t.type='order'   and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  ot.ccd_required ='true'  ", nativeQuery = true)
	List<Object[]> orderDetailsReportCcd(@Param("tenantId") String tenantId, @Param("userId") String userId);
	
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken ,t.ticket_id,tr.invoice_value  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and t.type='order'   and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  ot.ccd_required ='true'  and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and  m.manufacture_name ILIKE %:manufacturer%", nativeQuery = true)
	List<Object[]> orderDetailsReportCcdMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month,String manufacturer);



	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate,ts.created_on AS dispatchedDate, tr.delivery_date  AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken,t.ticket_id  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and t.assigned_to=:userId and t.type='order'   and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  ot.ccd_required ='true' AND t.status ILIKE %:Status%  and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orderDetailsReportCcdUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("manufacturer") String manufacturer);

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate,ts.created_on AS dispatchedDate, tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken ,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id  where t.tenant_id =:tenantId and t.assigned_to=:userId and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and   m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)

	List<Object[]> orderDetailsReportUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("manufacturer") String manufacturer);

	@Query(value = "WITH latest_remarks AS (SELECT ticket_id, remarks, ROW_NUMBER() OVER (PARTITION BY ticket_id ORDER BY id DESC) AS rn FROM tbl_ticket_status_history) SELECT t.ticket_id AS ticketNumber, m.manufacture_name AS manufacturer, t.type AS category, t.created_on AS emailDate, s.stockist_name, u.first_name AS assignTo, t.status AS status, s.city_id, lr.remarks AS last_remarks, EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) AS days_taken, CASE WHEN t.status = 'COMPLETED' THEN EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) END AS completion_date, sm.location FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id LEFT JOIN latest_remarks lr ON t.ticket_id = lr.ticket_id AND lr.rn = 1 WHERE t.tenant_id=:tenantId AND m.user_id = :userId  AND (t.type != 'order' OR t.type IS NULL) AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:Status%  and m.manufacture_name ILIKE %:manufacturer%  and (s.stockist_name  is NULL OR s.stockist_name ILIKE %:stockist%) GROUP BY t.ticket_id, m.manufacture_name, t.type, t.created_on, s.stockist_name, u.first_name, t.status, s.city_id, lr.remarks, sm.location ", nativeQuery = true)
	List<Object[]> ticketDetailsReport(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("ticketId") String ticketId, @Param("Status") String status,
			@Param("manufacturer") String manufacturer,String stockist);
	@Query(value = "WITH latest_remarks AS (SELECT ticket_id, remarks, ROW_NUMBER() OVER (PARTITION BY ticket_id ORDER BY id DESC) AS rn FROM tbl_ticket_status_history) SELECT t.ticket_id AS ticketNumber, m.manufacture_name AS manufacturer, t.type AS category, t.created_on AS emailDate, s.stockist_name, u.first_name AS assignTo, t.status AS status, s.city_id, lr.remarks AS last_remarks, EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) AS days_taken, CASE WHEN t.status = 'COMPLETED' THEN EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) END AS completion_date, sm.location FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id LEFT JOIN latest_remarks lr ON t.ticket_id = lr.ticket_id AND lr.rn = 1 WHERE t.tenant_id=:tenantId AND m.user_id = :userId  AND (t.type != 'order' OR t.type IS NULL) AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:Status%  and m.manufacture_name ILIKE %:manufacturer%  and (s.stockist_name  is NULL OR s.stockist_name ILIKE %:stockist%)   AND EXTRACT(MONTH FROM t.created_on) =:month GROUP BY t.ticket_id, m.manufacture_name, t.type, t.created_on, s.stockist_name, u.first_name, t.status, s.city_id, lr.remarks, sm.location ", nativeQuery = true)
	List<Object[]> ticketDetailsReportMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("ticketId") String ticketId, @Param("Status") String status,
			@Param("manufacturer") String manufacturer,String stockist,int month);


	@Query(value = "SELECT t.ticket_id AS ticketNumber, m.manufacture_name AS manufacturer, t.type AS category, t.created_on AS emailDate, s.stockist_name, u.first_name AS assignTo, t.status AS status, s.city_id, (SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks, EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) AS days_taken, CASE WHEN t.status = 'COMPLETED' THEN EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) END AS completion_date,sm.location FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and t.stockist_id=sm.stockist_id WHERE t.tenant_id = :tenantId AND t.assigned_to= :userId AND (t.type != 'order' OR t.type IS NULL) AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:Status%  and m.manufacture_name ILIKE %:manufacturer% group by t.ticket_id,m.manufacture_name,t.type,t.created_on,s.stockist_name,u.first_name,t.status,s.city_id,last_remarks,days_taken,completion_date,sm.location  "
			+ "", nativeQuery = true)
	List<Object[]> ticketDetailsReportUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("ticketId") String ticketId, @Param("Status") String status,
			@Param("manufacturer") String manufacturer);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND  tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') ", nativeQuery = true)
	List<Object[]> shipmentDetailsReport(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND  tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED')   AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportMonth(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId,int month);



	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND  tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.ccd_required='true'  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportCCD(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND  tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.ccd_required='true' AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportCCDMonth(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId,int month);
	

	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND  tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.pod_required='true'  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportPOD(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND  tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.pod_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportPODMonth(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId,int month);




	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND t.assigned_to =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportUser(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND t.assigned_to =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.ccd_required='true'  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportCCDUser(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId);

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number,tr.created_on AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order   and t.type='order' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer,int month);
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order   and t.type='order'   and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReport(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer);



	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on  AS dispatchedDate, tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and ot.pod_required='true'   and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportPodMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer,int month);
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on  AS dispatchedDate, tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and ot.pod_required='true'    and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportPod(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer);


	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate,ts.created_on AS dispatchedDate, tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and t.assigned_to=:userId and EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) > tm.deadline_order and ot.pod_required='true'    and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportPodUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer);

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and ot.ccd_required='true'   and t.type='order'  and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and mr.status = 'ACTIVE'  and  tm.status='ACTIVE'  and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportccdMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer,int month);
	
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and m.user_id=:userId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and ot.ccd_required='true'   and t.type='order'   and mr.status = 'ACTIVE'  and  tm.status='ACTIVE'  and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportccd(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer);



	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate,ts.created_on AS dispatchedDate, tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken,t.ticket_id FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and t.assigned_to=:userId and EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) > tm.deadline_order and ot.ccd_required='true'   and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportccdUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer);

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, m.manufacture_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken ,t.ticket_id  FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and t.assigned_to=:userId and EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) > tm.deadline_order and t.type='order'   and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  u.first_name ILIKE %:assignTo% and m.manufacture_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("assignTo") String assignTo, @Param("manufacturer") String manufacturer);

	@Query(value = "SELECT t.ticket_id, m.manufacturer_name, t.type, t.created_on, EXTRACT(DAY FROM AGE(TO_DATE(t.assigned_on, 'YYYY-MM-DD'), t.created_on)) AS days_taken, t.status FROM tbl_ticket t LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id  LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id=mp.manufacturerid  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   WHERE t.tenant_id = :tenantId and mp.user_id=:userId AND m.status = 'ACTIVE' and tm.status='ACTIVE'  AND t.type = :type AND (t.created_on >= :startDate AND t.created_on <= :endDate) AND (t.status = 'COMPLETED' OR t.status = 'DELIVERED')", nativeQuery = true)
	List<Object[]> performanceCompletionAndType(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate, @Param("type") String type);

	@Query(value = "SELECT t.ticket_id, m.manufacturer_name, t.type, t.created_on, EXTRACT(DAY FROM AGE(TO_DATE(t.assigned_on, 'YYYY-MM-DD'), t.created_on)) AS days_taken, t.status FROM tbl_ticket t LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id  LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id=mp.manufacturerid  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   WHERE t.tenant_id = :tenantId and t.assigned_to=:userId AND m.status = 'ACTIVE' and tm.status='ACTIVE'  AND t.type = :type AND (t.created_on >= :startDate AND t.created_on <= :endDate) AND (t.status = 'COMPLETED' OR t.status = 'DELIVERED')", nativeQuery = true)
	List<Object[]> performanceCompletionAndTypeUSER(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate, @Param("type") String type);

	@Query(value = "SELECT t.ticket_id, m.manufacturer_name, t.type, t.assigned_on, EXTRACT(DAY FROM AGE(TO_DATE(t.assigned_on, 'YYYY-MM-DD'), t.created_on)) AS days_taken, t.status FROM tbl_ticket t LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id=mp.manufacturerid  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   WHERE t.tenant_id = :tenantId and mp.user_id=:userId AND m.status = 'ACTIVE' and tm.status='ACTIVE'  AND (t.created_on >= :startDate AND t.created_on <= :endDate) AND (t.status = 'COMPLETED' OR t.status = 'DELIVERED')", nativeQuery = true)
	List<Object[]> performanceCompletion(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT t.ticket_id, m.manufacturer_name, t.type, t.assigned_on, EXTRACT(DAY FROM AGE(TO_DATE(t.assigned_on, 'YYYY-MM-DD'), t.created_on)) AS days_taken, t.status FROM tbl_ticket t LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id=mp.manufacturerid  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   WHERE t.tenant_id = :tenantId and t.assigned_to=:userId AND m.status = 'ACTIVE' and tm.status='ACTIVE'  AND (t.created_on >= :startDate AND t.created_on <= :endDate) AND (t.status = 'COMPLETED' OR t.status = 'DELIVERED')", nativeQuery = true)
	List<Object[]> performanceCompletionUSER(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate);

	@Query(value = " SELECT t.type, COALESCE(SUM(CASE WHEN t.status != 'COMPLETED' AND t.status != 'CANCELLED' AND t.status != 'CLOSED' THEN 1 ELSE 0 END), 0) AS open_count, COALESCE(SUM(CASE WHEN t.status = 'CLOSED' OR t.status ='DELIVERED' OR t.status='COMPLETED' OR t.status = 'CANCELLED' THEN 1 ELSE 0 END), 0) AS closed_delivered_count FROM tbl_ticket t LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id WHERE t.tenant_id = :tenantId AND mp.user_id = :userId AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.created_on >= :startDate AND t.created_on <= :endDate) GROUP BY t.type ", nativeQuery = true)
	List<Object[]> ticketOverviewReport(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

	@Query(value = " SELECT t.type, COALESCE(SUM(CASE WHEN t.status != 'COMPLETED' AND t.status != 'CANCELLED' AND t.status != 'CLOSED' THEN 1 ELSE 0 END), 0) AS open_count, COALESCE(SUM(CASE WHEN t.status = 'CLOSED' OR t.status ='DELIVERED' OR t.status='COMPLETED' OR t.status = 'CANCELLED' THEN 1 ELSE 0 END), 0) AS closed_delivered_count FROM tbl_ticket t LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id WHERE t.tenant_id = :tenantId AND t.assigned_to  = :userId AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.created_on >= :startDate AND t.created_on <= :endDate) GROUP BY t.type ", nativeQuery = true)
	List<Object[]> ticketOverviewReportUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT u.first_name AS team_member, "
			+ "SUM(CASE WHEN t.status = 'INVOICE CREATED' AND t.type ='order' THEN 1 ELSE 0 END) AS orders_created, "
			+ "sum(cast(inv.line_item as INTEGER)) AS total_line_items, "
			+ "SUM(CASE WHEN  t.status ='ASSIGNED'  AND t.type != 'order' THEN 1 ELSE 0 END) AS tickets_created,"
			+ "SUM(CASE WHEN t.status = 'CLOSED' THEN 1 ELSE 0 END) AS tickets_closed " + "FROM tbl_ticket t "
			+ "LEFT JOIN tbl_ticket_order_invoice inv ON t.ticket_id = inv.ticket_id "
			+ "LEFT JOIN tbl_user u ON t.assigned_to = u.user_id   "
			+ "LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id=mp.manufacturerid  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   WHERE t.tenant_id = :tenantId and (t.created_on >=:startDate AND t.created_on <=:endDate) and mp.user_id=:userId AND m.status = 'ACTIVE' and tm.status='ACTIVE'  "
			+ "GROUP BY u.first_name", nativeQuery = true)
	List<Object[]> teamMemberPerformance(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT u.first_name AS team_member, "
			+ "SUM(CASE WHEN t.status = 'INVOICE CREATED' AND t.type = 'order' THEN 1 ELSE 0 END) AS orders_created, "
			+ "sum(cast(inv.line_item as INTEGER)) AS total_line_items, "
			+ "SUM(CASE WHEN  t.status ='ASSIGNED'  AND t.type != 'order' THEN 1 ELSE 0 END) AS tickets_created,"
			+ "SUM(CASE WHEN t.status = 'CLOSED' THEN 1 ELSE 0 END) AS tickets_closed " + "FROM tbl_ticket t "
			+ "LEFT JOIN tbl_ticket_order_invoice inv ON t.ticket_id = inv.ticket_id "
			+ "LEFT JOIN tbl_user u ON t.assigned_to = u.user_id   "
			+ "LEFT JOIN tbl_manufacturer m ON t.manufacturer_id = m.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id=mp.manufacturerid  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = m.manufacturer_id   WHERE t.tenant_id = :tenantId and (t.created_on >=:startDate AND t.created_on <=:endDate) and t.assigned_to=:userId AND m.status = 'ACTIVE' and tm.status='ACTIVE'  "
			+ "GROUP BY u.first_name", nativeQuery = true)
	List<Object[]> teamMemberPerformanceUSER(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT t.ticket_id AS ticketNumber, m.manufacture_name AS manufacturer, t.created_on AS emailDate, EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) AS days_taken, u.first_name AS assignTo, t.status AS status, t.type AS category, s.stockist_name, s.city_id, sm.location FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id WHERE t.tenant_id = :tenantId AND m.user_id = :userId AND t.status != 'COMPLETED' AND t.status != 'CLOSED' AND EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) > tm.deadline_ticket AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.type != 'order' OR t.type IS NULL OR t.type = '')  AND EXTRACT(MONTH FROM t.created_on) =:month GROUP BY t.ticket_id, m.manufacture_name, t.created_on, u.first_name, t.status, t.type, s.stockist_name, s.city_id, sm.location ", nativeQuery = true)
	List<Object[]> ticketNotClosedMonth(@Param("tenantId") String tenantId, @Param("userId") String userId, int month);

	@Query(value = "SELECT t.ticket_id AS ticketNumber, m.manufacture_name AS manufacturer, t.created_on AS emailDate, EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) AS days_taken, u.first_name AS assignTo, t.status AS status, t.type AS category, s.stockist_name, s.city_id, sm.location FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id WHERE t.tenant_id = :tenantId AND m.user_id = :userId AND t.status != 'COMPLETED' AND t.status != 'CLOSED' AND EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) > tm.deadline_ticket AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.type != 'order' OR t.type IS NULL OR t.type = '')   GROUP BY t.ticket_id, m.manufacture_name, t.created_on, u.first_name, t.status, t.type, s.stockist_name, s.city_id, sm.location ", nativeQuery = true)
	List<Object[]> ticketNotClosed(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT t.ticket_id AS ticketNumber, m.manufacture_name AS manufacturer, t.created_on AS emailDate, EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) AS days_taken, u.first_name AS assignTo, t.status AS status, t.type AS category, s.stockist_name, s.city_id, sm.location FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id WHERE t.tenant_id = :tenantId AND t.assigned_to = :userId AND t.status != 'COMPLETED' AND t.status != 'CLOSED' AND EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) > tm.deadline_ticket AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.type != 'order' OR t.type IS NULL OR t.type = '') GROUP BY t.ticket_id, m.manufacture_name, t.created_on, u.first_name, t.status, t.type, s.stockist_name, s.city_id, sm.location ", nativeQuery = true)
	List<Object[]> ticketNotClosedUser(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.type AS category, t.created_on AS emailDate,EXTRACT(DAY FROM AGE(CURRENT_TIMESTAMP, TO_DATE(t.assigned_on, 'YYYY-MM-DD'))) AS days, s.stockist_name,u.first_name AS assignTo,t.status AS status,s.city_id from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid left join tbl_user u on t.assigned_to = u.user_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id left join tbl_stockist s ON s.stockist_id= t.stockist_id  where m.user_id =:userId and t.tenant_id = :tenantId and (t.created_on >=:startDate AND t.created_on <=:endDate) AND mr.status = 'ACTIVE'  and tm.status='ACTIVE' AND t.status ='ASSIGNED' and t.ticket_id ILIKE %:ticketId% and  t.status ILIKE  %:status%  and  u.first_name ILIKE  %:assignTo%  And t.type='order' and (TO_DATE(t.assigned_on, 'YYYY-MM-DD') + tm.deadline_order ) < :currentDate  ", nativeQuery = true)
	List<Object[]> ordersNotInvoiced(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate,
			@Param("ticketId") String ticketId, @Param("status") String status, @Param("assignTo") String assignTo,
			@Param("currentDate") Date date);

	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.type AS category, t.created_on AS emailDate,EXTRACT(DAY FROM AGE(CURRENT_TIMESTAMP, TO_DATE(t.assigned_on, 'YYYY-MM-DD'))) AS days, s.stockist_name,u.first_name AS assignTo,t.status AS status,s.city_id from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid left join tbl_user u on t.assigned_to = u.user_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id left join tbl_stockist s ON s.stockist_id= t.stockist_id  where t.assigned_to =:userId and t.tenant_id = :tenantId and (t.created_on >=:startDate AND t.created_on <=:endDate) AND mr.status = 'ACTIVE'  and tm.status='ACTIVE' AND t.status ='ASSIGNED' and t.ticket_id ILIKE %:ticketId% and  t.status ILIKE  %:status%  and  u.first_name ILIKE  %:assignTo%  And t.type='order' and (TO_DATE(t.assigned_on, 'YYYY-MM-DD') + tm.deadline_order ) < :currentDate  ", nativeQuery = true)
	List<Object[]> ordersNotInvoicedUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate,
			@Param("ticketId") String ticketId, @Param("status") String status, @Param("assignTo") String assignTo,
			@Param("currentDate") Date date);

	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.type AS category, o.created_on AS emailDate,s.stockist_name,u.first_name AS assignTo,t.status AS status,s.city_id,i.due_date,i.invoice_number from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id    left join tbl_ticket_order o on o.ticket_id = t.ticket_id left join tbl_ticket_order_invoice i on i.ticket_id = t.ticket_id    where t.tenant_id = :tenantId and m.user_id =:userId and (t.created_on >=:startDate AND t.created_on <=:endDate)   AND (t.status ='INVOICE CREATED' OR t.status='PICKED' OR t.status='CHECKED' OR t.status='PACKED') and t.type='order' and (o.created_on + tm.invoice_not_dispached) < :currentDate  AND mr.status = 'ACTIVE' and tm.status='ACTIVE'   and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:status% and m.manufacture_name ILIKE %:manufacturer%   group by i.invoice_number,t.ticket_id,m.manufacture_name,o.created_on,s.stockist_name,u.first_name,s.city_id,i.due_date order by t.ticket_id ASC ", nativeQuery = true)
	List<Object[]> invoicedNotDispatched(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate,
			@Param("ticketId") String ticketId, @Param("status") String status,
			@Param("manufacturer") String manufacturer, @Param("currentDate") Date currentDate);

	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.type AS category, o.created_on AS emailDate,s.stockist_name,u.first_name AS assignTo,t.status AS status,s.city_id,i.due_date,i.invoice_number from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id    left join tbl_ticket_order o on o.ticket_id = t.ticket_id left join tbl_ticket_order_invoice i on i.ticket_id = t.ticket_id   where t.tenant_id = :tenantId and t.assigned_to =:userId and (t.created_on >=:startDate AND t.created_on <=:endDate)   AND (t.status ='INVOICE CREATED' OR t.status='PICKED' OR t.status='CHECKED' OR t.status='PACKED') and t.type='order' and (o.created_on + tm.invoice_not_dispached) < :currentDate  AND mr.status = 'ACTIVE' and tm.status='ACTIVE'   and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:status% and m.manufacture_name ILIKE %:manufacturer%  group by i.invoice_number,t.ticket_id,m.manufacture_name,o.created_on,s.stockist_name,u.first_name,s.city_id,i.due_date order by t.ticket_id ASC ", nativeQuery = true)
	List<Object[]> invoicedNotDispatchedUser(@Param("tenantId") String tenantId, @Param("userId") String userId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate,
			@Param("ticketId") String ticketId, @Param("status") String status,
			@Param("manufacturer") String manufacturer, @Param("currentDate") Date currentDate);

	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.subject as email_subject, t.assigned_on AS emailDate,s.stockist_name,s.city_id,u.first_name AS assignTo,EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end)) AS days,t.status,(SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks,sm.location from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id left join tbl_stockist_manufacture sm on sm.stockist_id=s.stockist_id and t.manufacturer_id =sm.manufacture  where t.tenant_id =:tenantId and  m.user_id =:userId AND mr.status = 'ACTIVE' and tm.status='ACTIVE' and t.type='order' and EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end))>tm.order_not_fulfiled  and  t.status ='BLOCKED'", nativeQuery = true)
	List<Object[]> blockedOrder(@Param("tenantId") String tenantId, @Param("userId") String userId);
	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.subject as email_subject, t.assigned_on AS emailDate,s.stockist_name,s.city_id,u.first_name AS assignTo,EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end)) AS days,t.status,(SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks,sm.location from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id left join tbl_stockist_manufacture sm on sm.stockist_id=s.stockist_id and t.manufacturer_id =sm.manufacture  where t.tenant_id =:tenantId and  m.user_id =:userId AND mr.status = 'ACTIVE' and tm.status='ACTIVE' and t.type='order' and EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end))>tm.order_not_fulfiled  and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:months and  t.status ='BLOCKED'", nativeQuery = true)
	List<Object[]> blockedOrderMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int months);



	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,m.manufacture_name As manufacturer,t.subject as email_subject, t.assigned_on AS emailDate,s.stockist_name,s.city_id,u.first_name AS assignTo,EXTRACT(DAY FROM AGE(CURRENT_DATE ,   case when t.status='BLOCKED' then t.modified_on else null end)) AS days,t.status from tbl_ticket t left join tbl_manager_manufacturer_mapping m on t.manufacturer_id=m.manufacturerid LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id   where t.tenant_id =:tenantId and  t.assigned_to =:userId AND mr.status = 'ACTIVE' and tm.status='ACTIVE' and t.type='order'  and EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end))>tm.order_not_fulfiled  and  t.status ='BLOCKED'", nativeQuery = true)
	List<Object[]> blockedOrderUser(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) ", nativeQuery = true)
	List<Object[]> dispacthedNotDelivered(@Param("tenantId") String tenantId, @Param("userId") String userId);
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);



	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER)  and o.ccd_required='true'  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredCCD(@Param("tenantId") String tenantId, @Param("userId") String userId);
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER)  and o.ccd_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredCCDMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);
	
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER)  and o.pod_required='true'  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredPOD(@Param("tenantId") String tenantId, @Param("userId") String userId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER)  and o.pod_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredPODMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);




	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND t.assigned_to =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER)  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredUser(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND t.assigned_to =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) and o.ccd_required='true'  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredUserCCD(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT DISTINCT t.*, inv.* FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice inv ON inv.ticket_id = t.ticket_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id WHERE t.tenant_id =:tenantId AND mp.user_id =:userId AND t.assigned_to =:assignedTo AND CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') THEN ROUND(EXTRACT(EPOCH FROM (inv.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400) ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400) END > tm.deadline_order AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND t.type = 'order'  ", nativeQuery = true)
	List<Ticket> findByOrderCountDaadline(@Param(value = "tenantId") String tenantId, @Param(value = "userId") String userId,
			@Param(value = "assignedTo") String assignedTo);

	@Query(value = "SELECT * FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice inv ON inv.ticket_id = t.ticket_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id WHERE t.tenant_id = :tenantId AND mp.user_id = :userId AND t.assigned_to = :assignedTo AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND t.type = 'order'", nativeQuery = true)
	List<Ticket> findByOrderCount(@Param(value = "tenantId") String tenantId, @Param(value = "userId") String userId,
			@Param(value = "assignedTo") String assignedTo);

	@Query(value = "select  t.*,inv.* from tbl_ticket t left join tbl_ticket_order_invoice inv on inv.ticket_id=t.ticket_id  left join tbl_manager_manufacturer_mapping  mp on t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and mp.user_id =:userId and t.assigned_to=:assignedTo AND inv.status IN ('DELIVERED','POD RECEIVED') AND mr.status = 'ACTIVE' and tm.status='ACTIVE'  and t.type='order' ", nativeQuery = true)
	List<Ticket> findByOrderCountDelivered(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "assignedTo") String assignedTo);

	@Query(value = "SELECT * FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id WHERE t.tenant_id =:tenantId AND mp.user_id =:userId and t.assigned_to=:assignedTo AND CASE WHEN t.status = 'COMPLETED' THEN ROUND(EXTRACT(EPOCH FROM (t.modified_on - t.sent_date)) / 86400) ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_DATE - t.sent_date)) / 86400)  END > tm.deadline_ticket AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND t.type != 'order'  ", nativeQuery = true)
	List<Ticket> findByOtherCounts(@Param(value = "tenantId") String tenantId, @Param(value = "userId") String userId,
			@Param(value = "assignedTo") String assignedTo);

	@Query(value = "select * from tbl_ticket t left join tbl_manager_manufacturer_mapping  mp on t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and mp.user_id =:userId and t.assigned_to=:assignedTo  and  mr.status = 'ACTIVE' and tm.status='ACTIVE'  and t.type!='order' ", nativeQuery = true)
	List<Ticket> findByOtherCount(@Param(value = "tenantId") String tenantId, @Param(value = "userId") String userId,
			@Param(value = "assignedTo") String assignedTo);

	@Query(value = "SELECT * FROM tbl_ticket t LEFT JOIN tbl_manager_manufacturer_mapping mp ON t.manufacturer_id = mp.manufacturerid LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id WHERE t.tenant_id =:tenantId AND mp.user_id =:userId and t.assigned_to=:assignedTo and  t.status='COMPLETED' AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND t.type != 'order'  ", nativeQuery = true)
	List<Ticket> findByOtherCountClosed(@Param(value = "tenantId") String tenantId,
			@Param(value = "userId") String userId, @Param(value = "assignedTo") String assignedTo);

	@Query(value = "SELECT DISTINCT tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tor ON tor.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice = tor.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> deliveredMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);
	@Query(value = "SELECT DISTINCT tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tor ON tor.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice = tor.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) ", nativeQuery = true)
	List<Object[]> delivered(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT DISTINCT tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tor ON tor.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice = tor.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.ccd_required='true' ", nativeQuery = true)
	List<Object[]> deliveredCCD(@Param("tenantId") String tenantId, @Param("userId") String userId);
	
	@Query(value = "SELECT DISTINCT tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tor ON tor.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice = tor.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.ccd_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> deliveredCCDMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);
	
	@Query(value = "SELECT DISTINCT tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tor ON tor.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice = tor.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.pod_required='true' ", nativeQuery = true)
	List<Object[]> deliveredPOD(@Param("tenantId") String tenantId, @Param("userId") String userId);
	@Query(value = "SELECT DISTINCT tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tor ON tor.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice = tor.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND m.user_id =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.pod_required='true' AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> deliveredPODMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);

	
	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND t.assigned_to =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER)", nativeQuery = true)
	List<Object[]> deliveredUser(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND t.assigned_to =:userId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.ccd_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> deliveredUserCCD(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT COALESCE(SUM(CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric)), 0) AS total_invoice_value FROM (SELECT oi.invoice_value FROM tbl_ticket_order_invoice oi LEFT JOIN tbl_ticket t ON t.ticket_id = oi.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = t.stockist_id AND sm.manufacture = t.manufacturer_id WHERE oi.tenant_id = :tenantId AND sm.location = 'LCL' AND oi.created_on >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND oi.created_on < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month') AND sm.manufacture ILIKE %:manId ) AS unique_invoices ", nativeQuery = true)
	List<Object[]> invoiceAmountLocal(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month,int year);

	@Query(value = "SELECT COALESCE(SUM(CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric)), 0) AS total_invoice_value FROM (SELECT oi.invoice_value FROM tbl_ticket_order_invoice oi LEFT JOIN tbl_ticket t ON t.ticket_id = oi.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = t.stockist_id AND sm.manufacture = t.manufacturer_id WHERE oi.tenant_id = :tenantId AND sm.location = 'OSN' AND oi.created_on >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND oi.created_on < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  AND sm.manufacture ILIKE %:manId ) AS unique_invoices", nativeQuery = true)
	List<Object[]> invoiceAmountOutstation(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month,int year);

	@Query(value = "SELECT  COALESCE(COUNT(*), 0) AS count FROM tbl_stockist_manufacture sm left join tbl_stockist s on s.stockist_id=sm.stockist_id  where  s.tenant_id=:tenantId and sm.location='LCL' and sm.isenable=true and s.status='ACTIVE' and sm.manufacture ILIKE %:manId  ", nativeQuery = true)
	List<Object[]> localStockist(@Param("tenantId") String tenantId, @Param("manId") String manId);

	@Query(value = "SELECT  COALESCE(COUNT(*), 0) AS count FROM tbl_stockist_manufacture sm left join tbl_stockist s on s.stockist_id=sm.stockist_id  where  s.tenant_id=:tenantId and sm.location='OSN' and sm.isenable=true and s.status='ACTIVE' and sm.manufacture ILIKE %:manId", nativeQuery = true)
	List<Object[]> outStationStockist(@Param("tenantId") String tenantId, @Param("manId") String manId);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN  claim_type = 'NonSaleable' THEN 1 ELSE 0 END), 0) as NonSaleable ,COALESCE(SUM(CASE WHEN  claim_type = 'Saleable' THEN 1 ELSE 0 END), 0) as saleable,COALESCE(SUM(CASE WHEN claim_type ='Both' THEN 1 ELSE 0 END), 0) as both from tbl_returns where tenant_id=:tenantId  and "
			+ "EXTRACT(MONTH FROM received_date) =:month and EXTRACT(YEAR FROM received_date) = EXTRACT(YEAR FROM CURRENT_DATE) and manufacturer ILIKE %:manId ", nativeQuery = true)
	List<Object[]> claimReceived(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);
	
@Query(value="SELECT COALESCE(SUM(CASE WHEN  claim_type = 'NonSaleable' and mis_match=false THEN 1 ELSE 0 END), 0) as NonSaleable ,COALESCE(SUM(CASE WHEN  claim_type = 'Saleable' and mis_match=false THEN 1 ELSE 0 END), 0) as saleable,COALESCE(SUM(CASE WHEN claim_type ='Both' and mis_match=false THEN 1 ELSE 0 END), 0) as both from tbl_returns where tenant_id=:tenantId  and  EXTRACT(MONTH FROM received_date) =:month and EXTRACT(YEAR FROM received_date) = EXTRACT(YEAR FROM CURRENT_DATE) and manufacturer ILIKE %:manId ",nativeQuery = true)
	List<Object[]> claimMatch(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "SELECT "
			+ "COALESCE(SUM(CASE WHEN type = 'internal action items' THEN 1 ELSE 0 END), 0) as internalactionitems, "
			+ "COALESCE(SUM(CASE WHEN type = 'stockist returns complaint' THEN 1 ELSE 0 END), 0) as stockistreturnscomplaint, "
			+ "COALESCE(SUM(CASE WHEN type = 'stockist shortage complaint' THEN 1 ELSE 0 END), 0) as stockistshortagecomplaint, "
			+ "COALESCE(SUM(CASE WHEN type = 'ho notification' THEN 1 ELSE 0 END), 0) as honotification, "
			+ "COALESCE(SUM(CASE WHEN type = 'stockist query' THEN 1 ELSE 0 END), 0) as stockistquery, "
			+ "COALESCE(SUM(CASE WHEN type = 'stockist other complaint' THEN 1 ELSE 0 END), 0) as stockistothercomplaint, "
			+ "COALESCE(SUM(CASE WHEN type = 'ho query' THEN 1 ELSE 0 END), 0) as hoquery, "
			+ "COALESCE(SUM(CASE WHEN type = 'enquiry' THEN 1 ELSE 0 END), 0) as enquiry, "
			+ "COALESCE(SUM(CASE WHEN type = 'pod' THEN 1 ELSE 0 END), 0) as pod, "
			+ "COALESCE(SUM(CASE WHEN type = 'ho complaint' THEN 1 ELSE 0 END), 0) as hocomplaint, "
			+ "COALESCE(SUM(CASE WHEN type = 'others' THEN 1 ELSE 0 END), 0) as otherscount, "
			+ "COALESCE(SUM(CASE WHEN type IN ('internal action items', 'stockist returns complaint', 'stockist shortage complaint', 'ho notification', 'stockist query', 'stockist other complaint', 'ho query', 'enquiry', 'pod', 'ho complaint', 'others') THEN 1 ELSE 0 END), 0) as totalcount "
			+ "FROM tbl_ticket "
			+ "WHERE tenant_id = :tenantId and EXTRACT(MONTH FROM created_on) =:month and manufacturer_id ILIKE %:manId ", nativeQuery = true)
	List<Object[]> countTicketTypesByTenantId(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "select COALESCE(SUM(CASE WHEN c.status='INWARD'  and c.ischequehold =false THEN 1 ELSE 0 END), 0) as advanced,COALESCE(SUM(CASE WHEN c.status='SECURITY' THEN 1 ELSE 0 END), 0) as securitycount from tbl_cheques c left join tbl_stockist_manufacture sm on sm.sap_id=c.sap_id and sm.stockist_id=c.stockist_id left join tbl_stockist s on s.stockist_id=sm.stockist_id where s.tenant_id=:tenantId and  s.status='ACTIVE'  and  EXTRACT(MONTH FROM c.recive_date) =:month and EXTRACT(YEAR FROM c.recive_date) = EXTRACT(YEAR FROM CURRENT_DATE) and sm.manufacture ILIKE %:id%", nativeQuery = true)
	List<Object[]> advanceSecurity(@Param("tenantId") String tenantId,@Param("id") String id, @Param("month") int month);
	
	@Query(value = "select COALESCE(SUM(CASE WHEN c.status='OUTWARD' THEN 1 ELSE 0 END), 0) as outWard from tbl_cheques c left join tbl_stockist_manufacture sm on sm.sap_id=c.sap_id and sm.stockist_id=c.stockist_id left join tbl_stockist s on s.stockist_id=sm.stockist_id where s.tenant_id=:tenantId and  s.status='ACTIVE' and  EXTRACT(MONTH FROM c.deposit_date) =:month and EXTRACT(YEAR FROM c.deposit_date) = EXTRACT(YEAR FROM CURRENT_DATE) and sm.manufacture ILIKE %:id% ", nativeQuery = true)
	List<Object[]> outWard(@Param("tenantId") String tenantId,@Param("id") String id, @Param("month") int month);

	@Query(value = "SELECT COUNT(DISTINCT i.invoice_number) FROM tbl_ticket_order_invoice i LEFT JOIN tbl_ticket t ON i.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = t.stockist_id AND  sm.manufacture=t.manufacturer_id LEFT JOIN list_value_values lv ON lv.code = sm.cheque_category AND lv.list_value_key = '200' WHERE lv.value = '0' AND (i.status = 'DELIVERED' OR i.status = 'POD RECEIVED') AND t.tenant_id = :tenantId AND EXTRACT(MONTH FROM i.delivery_date) = :month and EXTRACT(YEAR FROM i.delivery_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND t.manufacturer_id ILIKE %:manId", nativeQuery = true)
	List<Object[]> codReceivedDelivery(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "select  count(DISTINCT i.invoice_number) from tbl_ticket_order_invoice i left join tbl_ticket t ON i.ticket_id = t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = t.stockist_id AND sm.manufacture=t.manufacturer_id left Join list_value_values lv ON lv.code= sm.cheque_category AND lv.list_value_key='200' WHERE lv.value='0' AND (i.status='DELIVERED' OR i.status='POD RECEIVED') AND i.cheque_status=true AND t.tenant_id =:tenantId AND EXTRACT(MONTH FROM i.delivery_date) =:month and EXTRACT(YEAR FROM i.delivery_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND t.manufacturer_id ILIKE %:manId% ", nativeQuery = true)
	List<Object[]> codReceivedCheque(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN a.location = 'LCL' THEN 1 ELSE 0 END), 0) AS local, COALESCE(SUM(CASE WHEN a.location = 'OSN' THEN 1 ELSE 0 END), 0) AS outstation FROM tbl_stockist_manufacture AS a LEFT JOIN tbl_cheques AS b ON a.stockist_id = b.stockist_id AND a.sap_id = b.sap_id AND a.tenant_id = b.tenant_id WHERE b.status = 'OUTWARD' AND b.tenant_id =:tenantId and EXTRACT(MONTH FROM b.deposit_date) =:month and EXTRACT(YEAR FROM b.deposit_date) = EXTRACT(YEAR FROM CURRENT_DATE) and a.manufacture ILIKE %:manId  ", nativeQuery = true)
	List<Object[]> depositeLocOut(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 1 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Jan, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 2 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Feb, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 3 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Mar, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 4 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Apr, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 5 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS May, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 6 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Jun, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 7 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Jul, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 8 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Aug, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 9 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Sep, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 10 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Oct, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 11 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Nov, COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM o.created_on) = 12 THEN CAST(CASE WHEN invoice_value = '' THEN '0' ELSE REPLACE(REPLACE(invoice_value, ',', ''), '.', '') END AS numeric) ELSE 0 END), 0) AS Dec  FROM tbl_ticket_order_invoice inv left join tbl_ticket_order o on o.ticket_id=inv.ticket_id LEFT JOIN tbl_ticket t on t.ticket_id = o.ticket_id AND t.tenant_id = o.tenant_id WHERE o.created_on >=:startDate AND o.created_on <=:endDate AND o.tenant_id=:tenantId AND t.manufacturer_id ILIKE %:manId% ", nativeQuery = true)
	List<Object[]> invoiceSalesCurrent(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND r.claim_type = 'Saleable' THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS Saleable, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND r.claim_type ='NonSaleable' THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS NonSaleable, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND r.claim_type = 'Both' THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS both FROM tbl_return_note rn LEFT JOIN tbl_returns r ON r.return_id = rn.return_id WHERE rn.tenant_id =:tenantId AND   rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = :month and EXTRACT(YEAR FROM rn.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) AND rn.tenant_id = r.tenant_id AND r.manufacturer ILIKE %:manId% ", nativeQuery = true)
	List<Object[]> claimsAmount(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 1 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_1, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 2 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_2, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 3 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_3, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 4 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_4, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 5 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_5, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 6 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_6, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 7 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_7, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 8 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_8, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 9 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_9, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 10 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_10, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 11 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_11, COALESCE(SUM(CASE WHEN rn.note_type = 'CN' AND EXTRACT(MONTH FROM rn.created_on) = 12 THEN CAST(rn.line_item AS INT) ELSE 0 END), 0) AS month_12 FROM tbl_return_note rn LEFT JOIN tbl_returns r ON r.return_id = rn.return_id WHERE rn.tenant_id =:tenantId AND rn.tenant_id = r.tenant_id and rn.created_on >=:startDate AND rn.created_on <=:endDate AND rn.note_type = 'CN' and  r.manufacturer ILIKE %:manId%", nativeQuery = true)
	List<Object[]> claimsSummary(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 1 THEN c.amount ELSE 0 END), 0) AS month_1, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 2 THEN c.amount ELSE 0 END), 0) AS month_2, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 3 THEN c.amount ELSE 0 END), 0) AS month_3, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 4 THEN c.amount ELSE 0 END), 0) AS month_4, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 5 THEN c.amount ELSE 0 END), 0) AS month_5, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 6 THEN c.amount ELSE 0 END), 0) AS month_6, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 7 THEN c.amount ELSE 0 END), 0) AS month_7, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 8 THEN c.amount ELSE 0 END), 0) AS month_8, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 9 THEN c.amount ELSE 0 END), 0) AS month_9, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 10 THEN c.amount ELSE 0 END), 0) AS month_10, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 11 THEN c.amount ELSE 0 END), 0) AS month_11, COALESCE(SUM(case when EXTRACT(MONTH FROM c.deposit_date) = 12 THEN c.amount ELSE 0 END), 0) AS month_12 from tbl_cheques c left join tbl_stockist_manufacture sm on sm.tenant_id = c.stockist_id and c.sap_id = sm.sap_id where c.tenant_id=:tenantId and  c.deposit_date >=:startDate AND c.deposit_date <=:endDate  ", nativeQuery = true)
	List<Object[]> chequeSummary(@Param("tenantId") String tenantId, @Param("startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate);

	@Query(value = "select COALESCE (Sum (case when  location ='LCL' then 1 else null end ),0) as local,COALESCE (Sum (case when  location ='OSN' then 1 else null end ),0) as outStation from tbl_ticket t left join tbl_ticket_order_invoice i ON i.ticket_id = t.ticket_id left join tbl_stockist_manufacture sm on sm.stockist_id = t.stockist_id and t.tenant_id=sm.tenant_id where t.tenant_id=:tenantId  and i.status='DISPATCHED' and EXTRACT(MONTH FROM t.created_on) =:month and sm.manufacture ILIKE %:man% ", nativeQuery = true)
	List<Object[]> ordersDispatched(@Param("tenantId") String tenantId, @Param("month") int month,
			@Param("man") String man);

	@Query(value = "select COALESCE (Sum (case when  location ='LCL' then 1 else null end ),0) as local,COALESCE (Sum (case when  location ='OSN' then 1 else null end ),0) as outStation from tbl_ticket t left join tbl_ticket_order_invoice i ON i.ticket_id = t.ticket_id left join tbl_stockist_manufacture sm on sm.stockist_id = t.stockist_id and t.tenant_id=sm.tenant_id where t.tenant_id=:tenantId  and (i.status='DELIVERED' OR i.status='POD RECEIVED') and EXTRACT(MONTH FROM t.created_on) =:month and sm.manufacture ILIKE %:man% ", nativeQuery = true)
	List<Object[]> ordersDeliverd(@Param("tenantId") String tenantId, @Param("month") int month,
			@Param("man") String man);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN ts.status = 'DISPATCHED' THEN CAST(inv.num_of_cases AS INTEGER) ELSE 0 END), 0) as deadlineCarton, COALESCE(SUM(CASE WHEN ts.status = 'DISPATCHED' AND inv.invoice_number IS NOT NULL THEN 1 ELSE 0 END), 0) as deadlineInvoice FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice inv ON inv.ticket_id = t.ticket_id AND inv.tenant_id = t.tenant_id LEFT JOIN (SELECT DISTINCT ticket_id, tenant_id, status, created_on FROM tbl_ticket_status_history WHERE status = 'DISPATCHED') ts ON inv.ticket_id = ts.ticket_id AND t.tenant_id = inv.tenant_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture WHERE t.tenant_id =:tenantId AND CAST(sm.tlt AS INTEGER) < EXTRACT(DAY FROM AGE( inv.delivery_date, ts.created_on )) and t.manufacturer_id ILIKE %:man% and EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> deadlineDelivery(@Param("tenantId") String tenantId, @Param("man") String manufacturerId,
			@Param("month") int month);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN ts.status = 'DISPATCHED' THEN CAST(inv.num_of_cases AS INTEGER) ELSE 0 END), 0) as deadlineCarton, COALESCE(SUM(CASE WHEN ts.status = 'DISPATCHED' AND inv.invoice_number IS NOT NULL THEN 1 ELSE 0 END), 0) as deadlineInvoice FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice inv ON inv.ticket_id = t.ticket_id AND inv.tenant_id = t.tenant_id LEFT JOIN (SELECT DISTINCT ticket_id, tenant_id, status, created_on FROM tbl_ticket_status_history WHERE status = 'DISPATCHED') ts ON inv.ticket_id = ts.ticket_id AND t.tenant_id = inv.tenant_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture WHERE t.tenant_id =:tenantId AND CAST(sm.tlt AS INTEGER) < EXTRACT(DAY FROM AGE( inv.delivery_date, ts.created_on )) and inv.transporter ILIKE %:transportId% and t.manufacturer_id ILIKE %:man% and EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> deadlineDeliveryTransID(@Param("tenantId") String tenantId, @Param("man") String manufacturerId,
			@Param("transportId") String transport, @Param("month") int month);

	@Query(value = "select COALESCE (Sum (case when  location ='LCL' then 1 else null end ),0) as local,COALESCE (Sum (case when  location ='OSN' then 1 else null end ),0) as outStation from tbl_ticket t left join tbl_ticket_order_invoice i ON i.ticket_id = t.ticket_id left join tbl_stockist_manufacture sm on sm.stockist_id = t.stockist_id and t.tenant_id=sm.tenant_id left join tbl_ticket_order o ON o.ticket_id=t.ticket_id and o.tenant_id=t.tenant_id where t.tenant_id=:tenantId  and i.status='DISPATCHED' and EXTRACT(MONTH FROM t.created_on) =:month and sm.manufacture ILIKE %:man% and  o.transporter =:transportId ", nativeQuery = true)
	List<Object[]> ordersDispatchedTransID(@Param("tenantId") String tenantId, @Param("month") int month,
			@Param("man") String man, @Param("transportId") String transportId);

	@Query(value = "select COALESCE (Sum (case when  location ='LCL' then 1 else null end ),0) as local,COALESCE (Sum (case when  location ='OSN' then 1 else null end ),0) as outStation from tbl_ticket t left join tbl_ticket_order_invoice i ON i.ticket_id = t.ticket_id left join tbl_stockist_manufacture sm on sm.stockist_id = t.stockist_id and t.tenant_id=sm.tenant_id left join tbl_ticket_order o ON o.ticket_id=t.ticket_id and o.tenant_id=t.tenant_id where t.tenant_id=:tenantId  and t.status='DELIVERED' OR i.status='POD RECEIVED' and EXTRACT(MONTH FROM t.created_on) =:month and sm.manufacture ILIKE %:man% and  o.transporter =:transportId  ", nativeQuery = true)
	List<Object[]> ordersDeliverdTransID(@Param("tenantId") String tenantId, @Param("month") int month,
			@Param("man") String man, @Param("transportId") String transportId);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN i.status ='DISPATCHED' THEN 1 ELSE 0 END), 0) AS dispatched, COALESCE(SUM(CASE WHEN i.status = 'DISPATCHED' THEN CAST(i.num_of_cases AS INTEGER) ELSE 0 END), 0) AS cartons FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice i ON t.ticket_id = i.ticket_id AND t.tenant_id = i.tenant_id WHERE t.tenant_id=:tenantId and EXTRACT(MONTH FROM t.created_on) =:month", nativeQuery = true)
	List<Object[]> transportCounts(@Param("tenantId") String tenantId, @Param("month") int month);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN t.status ='DISPATCHED' THEN 1 ELSE 0 END), 0) AS dispatched, COALESCE(SUM(CASE WHEN t.status = 'DISPATCHED' THEN CAST(o.num_of_cases AS INTEGER) ELSE 0 END), 0) AS cartons FROM tbl_ticket t LEFT JOIN tbl_ticket_order o ON t.ticket_id = o.ticket_id AND t.tenant_id = o.tenant_id WHERE t.tenant_id=:tenantId and o.transporter =:transportId ", nativeQuery = true)
	List<Object[]> transportCountsTransport(@Param("tenantId") String tenantId,
			@Param("transportId") String transportId);

	@Query(value = "SELECT COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 1 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS djan, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 2 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS dfeb, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 3 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS dmar, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 4 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS dapr, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 5 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS dmay, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 6 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS djun, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 7 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS djul, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 8 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS daug, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 9 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS dsep, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 10 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS doct, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 11 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS dnov, COALESCE(SUM(CASE WHEN inv.status IN ('DELIVERED', 'POD RECEIVED') AND EXTRACT(MONTH FROM inv.created_on) = 12 THEN CASE WHEN invoice_value = '' THEN 0 ELSE CAST(REPLACE(REPLACE(invoice_value, ',', ''), '.', '') AS numeric) END ELSE 0 END), 0) AS ddec FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket_order o ON o.ticket_id = inv.ticket_id LEFT JOIN tbl_ticket t ON o.ticket_id = t.ticket_id AND t.tenant_id = o.tenant_id  WHERE o.created_on >= :startDate AND o.created_on <= :endDate AND o.tenant_id = :tenantId AND t.manufacturer_id ILIKE %:manufacturerId% AND inv.transporter ILIKE %:transportId%", nativeQuery = true)
	List<Object[]> deliverySummary(@Param("tenantId") String tenantId, @Param("transportId") String transportId,
			@Param("manufacturerId") String manufacturerId, @Param("startDate") LocalDateTime startDate,
			@Param("endDate") LocalDateTime endDate);

	@Query(value = "SELECT COALESCE(count((CASE WHEN tv.invoice_number IS NOT null  THEN tv.invoice_number ELSE '' END)), 0) AS tenantOrderTotal,COALESCE(SUM(CASE WHEN t.type='order' AND (tv.status ='DELIVERED' or tv.status='POD RECEIVED')  THEN 1 ELSE 0 END),0) AS completedOrder,COALESCE(SUM(CASE WHEN t.type='order' AND t.status ='BLOCKED' THEN 1 ELSE 0 END), 0) AS blockedOrder FROM tbl_ticket t LEFT JOIN tbl_ticket_order_invoice tv ON t.ticket_id = tv.ticket_id WHERE  t.tenant_id =:tenantId and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and t.type='order' and t.manufacturer_id ILIKE %:manId% ", nativeQuery = true)
	List<Object[]> findTenantCount(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

   @Query(value = "WITH FilteredHistory AS (SELECT * FROM tbl_ticket_status_history WHERE status = 'DISPATCHED' AND history_on >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND history_on < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')) SELECT COALESCE(SUM(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN CAST(inv.num_of_cases AS INTEGER) ELSE 0 END), 0) AS cartons, COALESCE(COUNT(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN 1 ELSE NULL END), 0) AS dispatched_count FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id INNER JOIN FilteredHistory ts ON ts.invoice = inv.invoice_number INNER JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture WHERE t.tenant_id = :tenantId AND sm.location = 'LCL' AND sm.manufacture ILIKE %:manufacturerId%", nativeQuery = true)
	List<Object[]> deliveryByTransporterLocal(@Param("tenantId") String tenantId, @Param("month") int month,
			@Param("manufacturerId") String manufacturerId,int year);

	@Query(value = "WITH FilteredHistory AS (SELECT * FROM tbl_ticket_status_history WHERE status = 'DISPATCHED' AND history_on >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND history_on < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')) SELECT COALESCE(SUM(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN CAST(inv.num_of_cases AS INTEGER) ELSE 0 END), 0) AS cartons, COALESCE(COUNT(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN 1 ELSE NULL END), 0) AS dispatched_count FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id INNER JOIN FilteredHistory ts ON ts.invoice = inv.invoice_number INNER JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture WHERE t.tenant_id = :tenantId AND sm.location = 'OSN' AND sm.manufacture ILIKE %:manufacturerId% ", nativeQuery = true)
	List<Object[]> deliveryByTransporterOutstation(@Param("tenantId") String tenantId, @Param("month") int month,
			@Param("manufacturerId") String manufacturerId,int year);

	@Query(value = "WITH FilteredHistory AS (SELECT * FROM tbl_ticket_status_history WHERE status = 'DISPATCHED' AND history_on >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND history_on < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')) SELECT COALESCE(SUM(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN CAST(inv.num_of_cases AS INTEGER) ELSE 0 END), 0) AS cartons, COALESCE(COUNT(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN 1 ELSE NULL END), 0) AS dispatched_count FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id INNER JOIN FilteredHistory ts ON ts.invoice = inv.invoice_number INNER JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture WHERE t.tenant_id = :tenantId AND sm.location = 'LCL' AND sm.manufacture ILIKE %:manufacturerId% and inv.transporter ILIKE %:transport%  ", nativeQuery = true)
	List<Object[]> transporterLocalTansp(@Param("tenantId") String tenantId, @Param("transport") String transport,
			@Param("month") int month, @Param("manufacturerId") String manufacturerId,int year);

	@Query(value = "WITH FilteredHistory AS (SELECT * FROM tbl_ticket_status_history WHERE status = 'DISPATCHED' AND history_on >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND history_on < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')) SELECT COALESCE(SUM(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN CAST(inv.num_of_cases AS INTEGER) ELSE 0 END), 0) AS cartons, COALESCE(COUNT(CASE WHEN inv.status IN ('DISPATCHED','DELIVERED','POD RECEIVED') THEN 1 ELSE NULL END), 0) AS dispatched_count FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id INNER JOIN FilteredHistory ts ON ts.invoice = inv.invoice_number INNER JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id AND t.manufacturer_id = sm.manufacture WHERE t.tenant_id = :tenantId AND sm.location = 'OSN' AND sm.manufacture ILIKE %:manufacturerId% and inv.transporter ILIKE %:transport% ", nativeQuery = true)
	List<Object[]> transporterOutstationTransp(@Param("tenantId") String tenantId, @Param("transport") String transport,
			@Param("month") int month, @Param("manufacturerId") String manufacturerId,int year);

	@Query(value = "select * from (select DISTINCT user_id, first_name  FROM tbl_user  WHERE tenant_id =:tenantId) as tableA inner JOIN (SELECT DISTINCT t.assigned_to FROM tbl_ticket AS t left join tbl_manager_manufacturer_mapping mp on mp.manufacturerid=t.manufacturer_id WHERE t.tenant_id =:tenantId and mp.user_id=:hirachyId) as tableB on tableA.user_id=tableB.assigned_to", nativeQuery = true)
	public List<Object[]> findUserListReport(@Param("tenantId") String tenantId, @Param("hirachyId") String hirachyId);


	
	@Query(value = "SELECT l.name, COUNT(t.type) AS totcount FROM tbl_list_value v LEFT JOIN list_value_values l ON l.list_value_key = v.key LEFT JOIN tbl_ticket t ON t.type = l.code WHERE v.key = '100' AND t.tenant_id = :tenantId AND l.code NOT IN ('order','NOA') and EXTRACT(MONTH FROM t.sent_date) =:month and EXTRACT(YEAR FROM t.sent_date) = EXTRACT(YEAR FROM CURRENT_DATE) and t.manufacturer_id ILIKE %:manId  GROUP BY l.name", nativeQuery = true)
	List<Object[]> ticketCategory(@Param("tenantId") String tenantId, @Param("manId") String manId,
			@Param("month") int month);

	@Query(value = "SELECT DISTINCT inv.invoice_number, inv.ticket_id, s.stockist_name,s.city_id, m.manufacturer_name,inv.transporter,inv.delivery_date,sm.location FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id  WHERE inv.tenant_id =:tenantId AND mp.user_id =:userId AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND inv.lr_number IS NULL AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE'", nativeQuery = true)
	List<Object[]> lrNotreceived(@Param("tenantId") String tenantId, @Param("userId") String userId);
	@Query(value = "SELECT DISTINCT inv.invoice_number, inv.ticket_id, s.stockist_name,s.city_id, m.manufacturer_name,inv.transporter,inv.delivery_date,sm.location FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id  WHERE inv.tenant_id =:tenantId AND mp.user_id =:userId AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND inv.lr_number IS NULL AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND EXTRACT(MONTH FROM inv.delivery_date) =:month ", nativeQuery = true)
	List<Object[]> lrNotreceivedMonth(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);



	@Query(value = "SELECT DISTINCT inv.invoice_number, inv.ticket_id, s.stockist_name,s.city_id, m.manufacturer_name,inv.transporter,inv.delivery_date,sm.location FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_manager_manufacturer_mapping mp ON mp.manufacturerid = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and s.stockist_id=t.stockist_id  WHERE inv.tenant_id =:tenantId AND t.assigned_to=:userId AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND inv.lr_number IS NULL AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE'", nativeQuery = true)
	List<Object[]> lrNotreceivedUser(@Param("tenantId") String tenantId, @Param("userId") String userId);

	@Query(value = "SELECT t.ticket_id AS ticketNumber, mr.manufacturer_name AS manufacturer, t.created_on AS emailDate, EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) AS days_taken, u.first_name AS assignTo, t.status AS status, t.type AS category, s.stockist_name, s.city_id, sm.location FROM tbl_ticket t  LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id WHERE t.tenant_id = :tenantId AND t.status != 'COMPLETED' AND t.status != 'CLOSED' AND EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) > tm.deadline_ticket AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.type != 'order' OR t.type IS NULL OR t.type = '')  AND EXTRACT(MONTH FROM t.created_on) =:month GROUP BY t.ticket_id, mr.manufacturer_name, t.created_on, u.first_name, t.status, t.type, s.stockist_name, s.city_id, sm.location", nativeQuery = true)
	List<Object[]> ticketNotClosedSuperMonth(String tenantId,int month);
	
	@Query(value = "SELECT t.ticket_id AS ticketNumber, mr.manufacturer_name AS manufacturer, t.created_on AS emailDate, EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) AS days_taken, u.first_name AS assignTo, t.status AS status, t.type AS category, s.stockist_name, s.city_id, sm.location FROM tbl_ticket t  LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND t.stockist_id = sm.stockist_id WHERE t.tenant_id = :tenantId AND t.status != 'COMPLETED' AND t.status != 'CLOSED' AND EXTRACT(DAY FROM AGE(CURRENT_DATE, t.created_on)) > tm.deadline_ticket AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND (t.type != 'order' OR t.type IS NULL OR t.type = '')   GROUP BY t.ticket_id, mr.manufacturer_name, t.created_on, u.first_name, t.status, t.type, s.stockist_name, s.city_id, sm.location", nativeQuery = true)
	List<Object[]> ticketNotClosedSuper(String tenantId);



	@Query(value = "SELECT t.ticket_id AS ticketNumber, mr.manufacturer_name AS manufacturer, t.type AS category, t.created_on AS emailDate, s.stockist_name, u.first_name AS assignTo, t.status AS status, s.city_id, (SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks, EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) AS days_taken, CASE WHEN t.status = 'COMPLETED' THEN EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) END AS completion_date,sm.location FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and t.stockist_id=sm.stockist_id WHERE t.tenant_id = :tenantId  AND (t.type != 'order' OR t.type IS NULL) AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:status%  and mr.manufacturer_name ILIKE %:manufacturer% group by t.ticket_id,mr.manufacturer_name,t.type,t.created_on,s.stockist_name,u.first_name,t.status,s.city_id,last_remarks,days_taken,completion_date,sm.location  ", nativeQuery = true)
	List<Object[]> ticketDetailsReportSuper(String tenantId, String ticketId, String status, String manufacturer);
	
	@Query(value = "SELECT t.ticket_id AS ticketNumber, mr.manufacturer_name AS manufacturer, t.type AS category, t.created_on AS emailDate, s.stockist_name, u.first_name AS assignTo, t.status AS status, s.city_id, (SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks, EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) AS days_taken, CASE WHEN t.status = 'COMPLETED' THEN EXTRACT(DAY FROM AGE(t.modified_on, t.created_on)) END AS completion_date,sm.location FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and t.stockist_id=sm.stockist_id WHERE t.tenant_id = :tenantId  AND (t.type != 'order' OR t.type IS NULL) AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE'  AND EXTRACT(MONTH FROM t.created_on) =:month and t.ticket_id ILIKE %:ticketId% and t.status ILIKE %:status%  and mr.manufacturer_name ILIKE %:manufacturer% group by t.ticket_id,mr.manufacturer_name,t.type,t.created_on,s.stockist_name,u.first_name,t.status,s.city_id,last_remarks,days_taken,completion_date,sm.location  ", nativeQuery = true)
	List<Object[]> ticketDetailsReportSuperMonth(String tenantId, String ticketId, String status, String manufacturer,int month);



	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,mr.manufacturer_name As manufacturer,t.subject as email_subject, t.assigned_on AS emailDate,s.stockist_name,s.city_id,u.first_name AS assignTo,EXTRACT(DAY FROM AGE(CURRENT_DATE ,   case when t.status='BLOCKED' then t.modified_on else null end)) AS days,t.status,(SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks,sm.location from tbl_ticket t  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id  left join tbl_stockist_manufacture sm on sm.stockist_id=s.stockist_id and sm.manufacture =t.manufacturer_id  where t.tenant_id =:tenantId  AND mr.status = 'ACTIVE' and tm.status='ACTIVE' and t.type='order'  and EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end))>tm.order_not_fulfiled  and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month and  t.status ='BLOCKED'", nativeQuery = true)
	List<Object[]> blockedOrderSuperMonth(@Param("tenantId") String tenantId,int month);
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name AS manufacturer, t.subject AS email_subject, t.assigned_on AS emailDate, s.stockist_name, s.city_id, u.first_name AS assignTo, EXTRACT(DAY FROM AGE(CURRENT_DATE, CASE WHEN t.status = 'BLOCKED' THEN t.modified_on ELSE NULL END)) AS days, t.status, (SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks, sm.location FROM tbl_ticket t LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = s.stockist_id AND sm.manufacture = t.manufacturer_id WHERE t.tenant_id =:tenantId AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND t.type = 'order' AND t.status = 'BLOCKED' AND TO_DATE(t.assigned_on,'YYYY-MM-DD') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(t.assigned_on,'YYYY-MM-DD') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  and t.manufacturer_id  ILIKE %:id% ", nativeQuery = true)
	List<Object[]> blockedOrderSuperMonthDashBoard(@Param("tenantId") String tenantId,@Param("id") String id,int month,int year);
	
	@Query(value = "select DISTINCT t.ticket_id AS ticketNumber,mr.manufacturer_name As manufacturer,t.subject as email_subject, t.assigned_on AS emailDate,s.stockist_name,s.city_id,u.first_name AS assignTo,EXTRACT(DAY FROM AGE(CURRENT_DATE ,   case when t.status='BLOCKED' then t.modified_on else null end)) AS days,t.status,(SELECT remarks FROM tbl_ticket_status_history th WHERE t.ticket_id = th.ticket_id ORDER BY th.id DESC LIMIT 1) AS last_remarks,sm.location from tbl_ticket t  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id  left join tbl_stockist_manufacture sm on sm.stockist_id=s.stockist_id and sm.manufacture =t.manufacturer_id  where t.tenant_id =:tenantId  AND mr.status = 'ACTIVE' and tm.status='ACTIVE' and t.type='order'  and EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end))>tm.order_not_fulfiled   and  t.status ='BLOCKED'", nativeQuery = true)
	List<Object[]> blockedOrderSuper(@Param("tenantId") String tenantId);



	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on  AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken,t.ticket_id FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId  and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and ot.pod_required='true'  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month   and  u.first_name ILIKE %:assignTo% and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportPodSuperMonth(@Param("tenantId") String tenantId, @Param("assignTo") String assignTo,
			@Param("manufacturer") String manufacturer,int month);
	
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on  AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken,t.ticket_id FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId  and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and ot.pod_required='true'  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'    and  u.first_name ILIKE %:assignTo% and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportPodSuper(@Param("tenantId") String tenantId, @Param("assignTo") String assignTo,
			@Param("manufacturer") String manufacturer);


	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken,t.ticket_id FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order  and ot.ccd_required='true'  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and  u.first_name ILIKE %:assignTo% and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportccdSuperMonth(@Param("tenantId") String tenantId, @Param("assignTo") String assignTo,
			@Param("manufacturer") String manufacturer,int month);
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order  and ot.ccd_required='true'  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'   and  u.first_name ILIKE %:assignTo% and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportccdSuper(@Param("tenantId") String tenantId, @Param("assignTo") String assignTo,
			@Param("manufacturer") String manufacturer);

	

	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number,tr.created_on AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END as days_taken ,t.ticket_id  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and t.type='order'  and mr.status = 'ACTIVE'   and tm.status='ACTIVE' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month and  u.first_name ILIKE %:assignTo% and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportSuperMonth(@Param("tenantId") String tenantId, @Param("assignTo") String assignTo,
			@Param("manufacturer") String manufacturer,int month);
	
	
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on AS invoiceDate ,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken ,t.ticket_id  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and t.type='order'  and mr.status = 'ACTIVE'   and tm.status='ACTIVE'  and  u.first_name ILIKE %:assignTo% and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orederDeadlineReportSuper(@Param("tenantId") String tenantId, @Param("assignTo") String assignTo,
			@Param("manufacturer") String manufacturer);



	@Query(value = "SELECT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name, ot.customer_ref_number, sm.sap_id, u.first_name, tr.invoice_number, CASE WHEN t.status = 'INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate, MAX(ts.created_on) AS dispatchedDate, tr.delivery_date AS deliveredDate, t.assigned_on, CASE WHEN t.status = 'INVOICE CREATED' THEN tr.status ELSE t.status END AS status, EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on, 'yyyy-mm-dd'))) AS days_taken, t.ticket_id,tr.invoice_value FROM tbl_ticket t LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id = t.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_ticket_order_invoice tr ON tr.ticket_id = t.ticket_id LEFT JOIN tbl_ticket_status_history ts ON ts.invoice=tr.invoice_number AND ts.status = 'DISPATCHED' LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture = t.manufacturer_id AND sm.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id WHERE t.tenant_id =:tenantId AND t.type = 'order' AND tr.status = 'DELIVERED' AND mr.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND ot.pod_required = 'true' AND mr.manufacturer_name ILIKE %:manufacturer% GROUP BY s.stockist_name, s.city_id, sm.location, mr.manufacturer_name, ot.customer_ref_number, sm.sap_id, u.first_name, tr.invoice_number, invoiceDate, tr.delivery_date, t.assigned_on, t.status, tr.status, t.ticket_id,tr.invoice_value ", nativeQuery = true)

	List<Object[]> orderDetailsReportPodSuper(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer);
	
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on  AS invoiceDate, ts.created_on  AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id,tr.invoice_value  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and ot.pod_required ='true' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)

	List<Object[]> orderDetailsReportPodSuperMonth(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer,int month);



	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id,tr.invoice_value  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  ot.ccd_required ='true'   and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orderDetailsReportCcdSuper(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer);
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on  AS invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken,t.ticket_id,tr.invoice_value  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE' and  ot.ccd_required ='true' and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month  and mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)
	List<Object[]> orderDetailsReportCcdSuperMonth(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer,int month);


	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS daysTaken, t.ticket_id,tr.invoice_value FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id  where t.tenant_id =:tenantId  and t.type='order' and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and   mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)

	List<Object[]> orderDetailsReportSuper(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer);
	@Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, tr.created_on  AS invoiceDate, ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END, case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END AS days_taken ,t.ticket_id,tr.invoice_value FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.invoice=tr.invoice_number and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id  where t.tenant_id =:tenantId  and t.type='order' and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month and EXTRACT(YEAR FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) = EXTRACT(YEAR FROM CURRENT_DATE)   and   mr.manufacturer_name ILIKE %:manufacturer% ", nativeQuery = true)

	List<Object[]> orderDetailsReportSuperMonth(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer,int month);
	
	@Query(value = "SELECT DISTINCT tr.invoice_number AS invoiceNumber ,t.ticket_id as ticketId FROM tbl_ticket t   LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id  where t.tenant_id =:tenantId  and t.type='order' and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and TO_DATE(t.assigned_on,'YYYY-MM-DD') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(t.assigned_on,'YYYY-MM-DD') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  and   t.manufacturer_id ILIKE %:manufacturer% ", nativeQuery = true)
    List<Object[]> orderDetailsReportSuperMonthDash(@Param("tenantId") String tenantId,
			@Param("manufacturer") String manufacturer,int month,int year);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.ccd_required='true'  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportCCDSuper(@Param(value = "tenantId") String tenantId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.ccd_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportCCDSuperMonth(@Param(value = "tenantId") String tenantId,int month);
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.pod_required='true'  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportPODSuper(@Param(value = "tenantId") String tenantId);
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') and o.pod_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportPODSuperMonth(@Param(value = "tenantId") String tenantId,int month);



	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED') ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportSuper(@Param(value = "tenantId") String tenantId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CASE WHEN tor.status = 'DISPATCHED' THEN CURRENT_DATE WHEN tor.status IN ('DELIVERED','POD RECEIVED') THEN tor.delivery_date ELSE NULL END, ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status ='DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DISPATCHED', 'DELIVERED','POD RECEIVED')  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> shipmentDetailsReportSuperMonth(@Param(value = "tenantId") String tenantId,int month);


	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.ccd_required='true' ", nativeQuery = true)
	List<Object[]> deliveredUserCCDSuper(@Param("tenantId") String tenantId);

	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.ccd_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> deliveredUserCCDSuperMonth(@Param("tenantId") String tenantId,int month);

	
	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.pod_required='true' ", nativeQuery = true)
	List<Object[]> deliveredUserPODSuper(@Param("tenantId") String tenantId);

	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) and o.pod_required='true'  AND EXTRACT(MONTH FROM ts.created_on) =:month ", nativeQuery = true)
	List<Object[]> deliveredUserPODSuperMonth(@Param("tenantId") String tenantId,int  month);


	
	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER)", nativeQuery = true)
	List<Object[]> deliveredUserSuper(@Param("tenantId") String tenantId);
	

	@Query(value = "SELECT DISTINCT  tor.invoice_number, t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases,tor.delivery_date, EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ( 'DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) AS days_taken, tor.status, sm.location, sm.tlt FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id = t.ticket_id and ts.status = 'DISPATCHED' LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order  o ON o.ticket_id = t.ticket_id LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED') AND EXTRACT(DAY FROM AGE(CAST(tor.delivery_date AS TIMESTAMP), CASE WHEN tor.status IN ('DELIVERED','POD RECEIVED') AND t.ticket_id = ts.ticket_id AND ts.status = 'DISPATCHED' THEN ts.created_on ELSE NULL END)) > CAST (sm.tlt AS INTEGER) AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> deliveredUserSuperMonth(@Param("tenantId") String tenantId,int month);

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) and o.ccd_required='true'  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredUserCCDSuper(@Param("tenantId") String tenantId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) and o.ccd_required='true' AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredUserCCDSuperMonth(@Param("tenantId") String tenantId,int month);
	
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) and o.pod_required='true'  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredUserPODSuper(@Param("tenantId") String tenantId);
	
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, mr.manufacturer_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) and o.pod_required='true' AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredUserPODSuperMonth(@Param("tenantId") String tenantId,int month);
	

	

	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER)  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredSuper(@Param("tenantId") String tenantId);
	@Query(value = "SELECT DISTINCT t.ticket_id AS ticketNumber, m.manufacture_name, s.stockist_name, tr.transport_name, tor.num_of_cases, EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on )) AS days_taken, tor.status, sm.location, sm.tlt, tor.invoice_number FROM tbl_ticket t left join tbl_ticket_order_invoice tor on tor.ticket_id=t.ticket_id LEFT JOIN tbl_stockist_manufacture sm ON t.stockist_id = sm.stockist_id and t.manufacturer_id=sm.manufacture LEFT JOIN tbl_manager_manufacturer_mapping m ON t.manufacturer_id = m.manufacturerid LEFT JOIN tbl_user u ON m.user_id = u.user_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id LEFT JOIN tbl_ticket_order o ON o.ticket_id = t.ticket_id Left join tbl_ticket_status_history ts on ts.ticket_id=tor.ticket_id and ts.status='DISPATCHED' LEFT JOIN tbl_transport tr ON tr.transport_id = tor.transporter WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status ='DISPATCHED' AND ts.status='DISPATCHED' and EXTRACT(DAY FROM AGE(CURRENT_DATE , ts.created_on ))> CAST (sm.tlt AS INTEGER) AND EXTRACT(MONTH FROM ts.created_on) =:month  ", nativeQuery = true)
	List<Object[]> dispacthedNotDeliveredSuperMonth(@Param("tenantId") String tenantId,int month);



	@Query(value = "SELECT DISTINCT inv.invoice_number, inv.ticket_id, s.stockist_name,s.city_id, m.manufacturer_name,inv.transporter,inv.delivery_date,sm.location FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id  WHERE inv.tenant_id =:tenantId  AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND inv.lr_number IS NULL AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE'", nativeQuery = true)
	List<Object[]> lrNotreceivedSuper(@Param("tenantId") String tenantId);
	@Query(value = "SELECT DISTINCT inv.invoice_number, inv.ticket_id, s.stockist_name,s.city_id, m.manufacturer_name,inv.transporter,inv.delivery_date,sm.location FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id  WHERE inv.tenant_id =:tenantId  AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND inv.lr_number IS NULL AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE'  AND EXTRACT(MONTH FROM inv.delivery_date) =:month", nativeQuery = true)
	List<Object[]> lrNotreceivedSuperMonth(@Param("tenantId") String tenantId,int month);



	@Query(value = "select * from (select DISTINCT user_id, first_name  FROM tbl_user  WHERE tenant_id =:tenantId) as tableA inner JOIN (SELECT DISTINCT assigned_to FROM tbl_ticket AS t WHERE tenant_id =:tenantId) as tableB on tableA.user_id=tableB.assigned_to ", nativeQuery = true)
	public List<Object[]> findUserListReportSuper(@Param("tenantId") String tenantId);
	

	@Query(value="SELECT COUNT(DISTINCT tr.invoice_number)  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id where t.tenant_id =:tenantId  and t.type='order'  and mr.status = 'ACTIVE'  and tm.status='ACTIVE'  and ot.pod_required ='true' and tr.status='DELIVERED'  and  t.manufacturer_id ILIKE %:id% ",nativeQuery = true)
	
    public List<Object[]>  podNotReceived(@Param("tenantId") String tenantId,String id);  
    
   @Query(value = "SELECT COUNT(DISTINCT inv.invoice_number)  FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and s.stockist_id=t.stockist_id  WHERE inv.tenant_id =:tenantId  AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND inv.lr_number IS NULL AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE'  and t.manufacturer_id ILIKE %:id%  ", nativeQuery = true)
	List<Object[]> lrNotreceivedSuperLocal(@Param("tenantId") String tenantId,String id);

	@Query(value = "select COUNT(DISTINCT t.ticket_id) from tbl_ticket t  LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId  AND (t.created_on + tm.deadline_ticket) < :currentDate  and  mr.status = 'ACTIVE' and tm.status='ACTIVE' and (t.type!='order' or t.type is null)  and t.status!='COMPLETED' and EXTRACT(MONTH FROM t.created_on) =:month and EXTRACT(YEAR FROM t.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) and t.manufacturer_id ILIKE %:id% ", nativeQuery = true)
	List<Object[]> setTicketMiseed(@Param(value = "tenantId") String tenantId, @Param(value = "currentDate") Date currentDate,int month,String id);
     @Query(value="SELECT COALESCE(SUM(CASE WHEN subquery.invoice_number IS NOT NULL THEN 1 ELSE 0 END), 0) AS total_invoice_number FROM (SELECT DISTINCT inv.invoice_number FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = t.stockist_id AND sm.manufacture = t.manufacturer_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_cheques c ON c.stockist_id = sm.stockist_id AND c.sap_id = sm.sap_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id WHERE inv.tenant_id =:tenantId AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND inv.cheque_status = 'false' AND sm.location = 'LCL' AND (c.status IS NULL OR c.status NOT IN ('OUTWARD') OR c.status IN ('INWARD', 'SECURITY'))  AND t.manufacturer_id ILIKE %:id% ) subquery ",nativeQuery = true)
	 List<Object[]> paymentNotLocal(@Param("tenantId")String tenantId,String id);
	
     @Query(value="SELECT COALESCE(SUM(CASE WHEN subquery.invoice_number IS NOT NULL THEN 1 ELSE 0 END), 0) AS total_invoice_number FROM (SELECT DISTINCT inv.invoice_number FROM tbl_ticket_order_invoice inv LEFT JOIN tbl_ticket t ON t.ticket_id = inv.ticket_id LEFT JOIN tbl_stockist s ON s.stockist_id = t.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.stockist_id = t.stockist_id AND sm.manufacture = t.manufacturer_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = t.manufacturer_id LEFT JOIN tbl_cheques c ON c.stockist_id = sm.stockist_id AND c.sap_id = sm.sap_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id WHERE inv.tenant_id = :tenantId  AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND m.status = 'ACTIVE' AND tm.status = 'ACTIVE' AND inv.cheque_status = 'false' AND sm.location = 'OSN' AND (c.status IS NULL OR c.status NOT IN ('OUTWARD') OR c.status IN ('INWARD', 'SECURITY')) AND t.manufacturer_id ILIKE %:id% ) subquery   ",nativeQuery = true)
     List<Object[]> paymentNotOutstation(@Param("tenantId")String tenantId,String id);
     
   @Query(value = "SELECT DISTINCT s.stockist_name, s.city_id, sm.location, mr.manufacturer_name,ot.customer_ref_number,sm.sap_id,u.first_name,tr.invoice_number, CASE WHEN t.status='INVOICE CREATED' THEN t.modified_on ELSE NULL END AS invoiceDate,ts.created_on AS dispatchedDate,tr.delivery_date AS delivereddDate,t.assigned_on,CASE WHEN t.status='INVOICE CREATED' THEN tr.status ELSE t.status END,EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) AS days_taken ,t.ticket_id  FROM tbl_ticket t  LEFT JOIN tbl_user u ON t.assigned_to = u.user_id LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id left join tbl_ticket_status_history ts on ts.ticket_id=tr.ticket_id and ts.status='DISPATCHED' left join tbl_stockist_manufacture sm on sm.manufacture=t.manufacturer_id and sm.stockist_id=t.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and EXTRACT(DAY FROM AGE(CURRENT_DATE, TO_DATE(t.assigned_on,'yyyy-mm-dd'))) > tm.deadline_order and t.type='order'  and mr.status = 'ACTIVE'   and tm.status='ACTIVE' and (CASE WHEN (t.status = 'CANCELLED') THEN (EXTRACT(YEAR FROM TO_DATE(t.assigned_on,'yyyy-mm-dd')) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'yyyy-mm-dd')) = EXTRACT(MONTH FROM CURRENT_DATE)) WHEN (tr.status = 'POD RECEIVED' OR tr.status = 'DELIVERED') THEN (EXTRACT(YEAR FROM tr.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM tr.created_on) = EXTRACT(MONTH FROM CURRENT_DATE)) ELSE 1=1 END) AND EXTRACT(MONTH FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) =:month and EXTRACT(YEAR FROM TO_DATE(t.assigned_on,'YYYY-MM-DD')) = EXTRACT(YEAR FROM CURRENT_DATE) and  t.manufacturer_id ILIKE %:id% ", nativeQuery = true)
 	List<Object[]> findByOrderSuper(@Param(value = "tenantId") String tenantId,int month,String id);


    @Query(value="SELECT COALESCE(SUM(CASE WHEN EXTRACT(DAY FROM AGE(inv.delivery_date, ts.created_on)) > 2 AND inv.status IN ('DELIVERED', 'POD RECEIVED') AND o.ccd_required='true' THEN 1 ELSE 0 END), 0) AS first_deliverie, COALESCE(SUM(CASE WHEN EXTRACT(DAY FROM AGE(inv.delivery_date, ts.created_on)) > CAST(sm.tlt AS INTEGER) AND inv.status IN ('DELIVERED', 'POD RECEIVED') THEN 1 ELSE 0 END), 0) AS late_deliveries FROM tbl_ticket r LEFT JOIN tbl_ticket_order o ON o.ticket_id=r.ticket_id LEFT JOIN tbl_ticket_order_invoice inv ON inv.ticket_id=r.ticket_id LEFT JOIN tbl_manufacturer m ON m.manufacturer_id=r.manufacturer_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id=m.manufacturer_id AND tm.tenant_id=r.tenant_id LEFT JOIN tbl_ticket_status_history ts ON ts.ticket_id=inv.ticket_id AND ts.status='DISPATCHED' LEFT JOIN tbl_stockist s ON s.stockist_id=r.stockist_id LEFT JOIN tbl_stockist_manufacture sm ON sm.manufacture=r.manufacturer_id AND s.stockist_id=sm.stockist_id WHERE inv.tenant_id=:tenantId AND m.status='ACTIVE' AND tm.status='ACTIVE' AND ts.status='DISPATCHED' AND ((r.status IN ('BLOCKED','CANCELLED') AND EXTRACT(YEAR FROM TO_DATE(r.assigned_on,'yyyy-mm-dd'))=EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM TO_DATE(r.assigned_on,'yyyy-mm-dd'))=EXTRACT(MONTH FROM CURRENT_DATE)) OR (inv.status IN ('POD RECEIVED','DELIVERED') AND EXTRACT(YEAR FROM inv.created_on)=EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM inv.created_on)=EXTRACT(MONTH FROM CURRENT_DATE)) OR 1=1) and EXTRACT(MONTH FROM ts.created_on) =:month and EXTRACT(YEAR FROM ts.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) and r.manufacturer_id ILIKE %:id% ",nativeQuery = true)
     
     List<Object[]>  findByTwoAndTltmissedDelivered(@Param("tenantId") String tenantId,int month,String id);
 	
     @Query(value = "select COUNT(DISTINCT t.ticket_id)   from tbl_ticket t  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id=tm.tenant_id LEFT JOIN tbl_manufacturer mr ON t.manufacturer_id = mr.manufacturer_id  left join tbl_user u on t.assigned_to = u.user_id left join tbl_stockist s ON s.stockist_id= t.stockist_id   where t.tenant_id =:tenantId  AND mr.status = 'ACTIVE' and tm.status='ACTIVE' and t.type='order'  and EXTRACT(DAY FROM AGE(CURRENT_DATE ,  case when t.status='BLOCKED' then t.modified_on else null end))>tm.order_not_fulfiled  and  t.status ='BLOCKED'  and t.manufacturer_id ILIKE %:id%", nativeQuery = true)
 	List<Object[]> blockedOrderSuper(@Param("tenantId") String tenantId,String id);
 	
 	
 	@Query(value="SELECT * FROM ( SELECT DISTINCT r.stockist_id AS return_stockist_id, r.claim_number,r.status,r.received_date,  r.lr_booking_date, r.manufacturer FROM tbl_returns r LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = r.manufacturer LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = r.manufacturer AND r.tenant_id = tm.tenant_id WHERE r.tenant_id =:tenantId AND r.status != 'PENDING' AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' and r.manufacturer ILIKE %:id%  and EXTRACT(MONTH FROM  r.received_date) =:month and EXTRACT(YEAR FROM r.received_date) = EXTRACT(YEAR FROM CURRENT_DATE)  AND CASE WHEN r.status = 'CN_CREATED' THEN ROUND((r.modified_on - r.received_date)) ELSE ROUND((CURRENT_DATE - r.received_date)) END > tm.deadline_claim ) AS tableA INNER JOIN ( SELECT DISTINCT a.stockist_id AS stockist_id, a.stockist_name, a.city_id, c.city_name, b.sap_id, b.location, b.manufacture FROM tbl_stockist a LEFT JOIN tbl_stockist_manufacture b ON a.stockist_id = b.stockist_id AND a.tenant_id = b.tenant_id LEFT JOIN tbl_city c ON a.city_id = c.city_code WHERE a.tenant_id =:tenantId ) AS tableB ON tableA.return_stockist_id = tableB.stockist_id AND tableA.manufacturer = tableB.manufacture", nativeQuery = true) 
    List<Object[]> claimsNotClosedSuper(@Param("tenantId") String tenantId,int month,String id);
     
     @Query(value = "select DISTINCT tor.invoice_number FROM tbl_ticket_order_invoice tor LEFT JOIN tbl_ticket t ON t.ticket_id = tor.ticket_id  LEFT JOIN tbl_stockist s ON s.stockist_id= t.stockist_id LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id AND t.tenant_id = tm.tenant_id  WHERE t.tenant_id =:tenantId  AND tm.status = 'ACTIVE' AND mr.status = 'ACTIVE' AND tor.status IN ('DELIVERED','POD RECEIVED')  and t.manufacturer_id ILIKE :id and TO_DATE(t.assigned_on,'YYYY-MM-DD') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(t.assigned_on,'YYYY-MM-DD') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month') ", nativeQuery = true)
 	List<Object[]> deliveredDashBoard(@Param("tenantId") String tenantId, @Param("id") String id,int month,int year);
 	
 	@Query(value = "SELECT DISTINCT t.ticket_id,tr.invoice_number FROM tbl_ticket t  LEFT JOIN tbl_ticket_order ot ON ot.ticket_id =t.ticket_id  LEFT JOIN tbl_manufacturer mr ON mr.manufacturer_id = t.manufacturer_id left join tbl_ticket_order_invoice tr on tr.ticket_id=t.ticket_id  LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = t.manufacturer_id and t.tenant_id =tm.tenant_id where t.tenant_id =:tenantId and  case WHEN tr.status IN ('DELIVERED', 'POD RECEIVED') THEN  ROUND(EXTRACT(EPOCH FROM (tr.delivery_date - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  ELSE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - TO_TIMESTAMP(t.assigned_on, 'yyyy-mm-dd'))) / 86400)  END > tm.deadline_order and t.type='order'  and mr.status = 'ACTIVE'   and tm.status='ACTIVE'  and t.manufacturer_id ILIKE %:userId%  and EXTRACT(MONTH FROM  TO_DATE(t.assigned_on, 'yyyy-mm-dd')) =:month and EXTRACT(YEAR FROM TO_DATE(t.assigned_on, 'yyyy-mm-dd')) = EXTRACT(YEAR FROM CURRENT_DATE) and ot.ccd_required='true' ", nativeQuery = true)
 	List<Object[]> deliveredCCDDashBoard(@Param("tenantId") String tenantId, @Param("userId") String userId,int month);

 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate , status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId", nativeQuery = true)
 	List<OrderReport> getAllOrderDetailSuperAdmin(@Param("tenantId") String tenantId);
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId AND  TO_DATE(assignedon,'yyyy-mm-dd') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(assignedon,'yyyy-mm-dd') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  ", nativeQuery = true)
 	List<OrderReport> getAllOrderDetailSuperAdminMonth(@Param("tenantId") String tenantId,int year,int month);
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate , status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId and manufacturerid ILIKE %:id% and status='DELIVERED' and podrequired='true' ", nativeQuery = true)
 	List<OrderReport> getAllOrderDetailSuperAdminDAshPod(@Param("tenantId") String tenantId,String id);
 
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreport WHERE tenantid = :tenantId AND userid=:userId ", nativeQuery = true)
 	List<OrderReport> getAllOrderDetailManUser(@Param("tenantId") String tenantId,String userId);
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreport WHERE tenantid = :tenantId AND userid=:userId  AND  TO_DATE(assignedon,'yyyy-mm-dd') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(assignedon,'yyyy-mm-dd') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  ", nativeQuery = true)
 	List<OrderReport> getAllOrderDetailManUser(@Param("tenantId") String tenantId,String userId,int year,int month);
 	
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId and deadline_order<daystaken ", nativeQuery = true)
 	List<OrderReport> getAllOrderDeadlineSuperAdmin(@Param("tenantId") String tenantId);
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId  AND TO_DATE(assignedon,'yyyy-mm-dd') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(assignedon,'yyyy-mm-dd') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  and deadline_order<daystaken ", nativeQuery = true)
 	List<OrderReport> getAllOrderDeadlineSuperAdmin(@Param("tenantId") String tenantId,int year,int month);
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId  AND TO_DATE(assignedon,'yyyy-mm-dd') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(assignedon,'yyyy-mm-dd') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  and deadline_order<daystaken and manufacturerid ILIKE %:id%  ", nativeQuery = true)
 	List<OrderReport> getAllOrderDeadlineSuperAdminDash(@Param("tenantId") String tenantId,int year,int month,String id);
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreportsuper WHERE tenantid = :tenantId  AND TO_DATE(assignedon,'yyyy-mm-dd') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(assignedon,'yyyy-mm-dd') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  and deadline_order<daystaken and manufacturerid ILIKE %:id%  and ccdrequired='true' ", nativeQuery = true)
 	List<OrderReport> getAllOrderDeadlineSuperAdminDashCCD(@Param("tenantId") String tenantId,int year,int month,String id);
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreport WHERE tenantid = :tenantId AND userid=:userId and deadline_order<daystaken ", nativeQuery = true)
 	List<OrderReport> getAllOrderDeadlineManUser(@Param("tenantId") String tenantId,String userId);
 	
 	@Query(value="select ticketid, assignedon, locality, manufacturer, invoicenumber, invoicedate, sapid, cusrefno, dispatcheddate, TO_CHAR(deliveredddate,'yyyy-mm-dd') as deliveredddate, status, daystaken, invoiceamount, podrequired, ccdrequired,stockist,asssignedto,location FROM orderdetailreport WHERE tenantid = :tenantId AND userid=:userId  AND  TO_DATE(assignedon,'yyyy-mm-dd') >= DATE_TRUNC('month', DATE(:year || '-' || :month || '-01'))  AND TO_DATE(assignedon,'yyyy-mm-dd') < DATE_TRUNC('month', DATE(:year || '-' || :month || '-01') + INTERVAL '1 month')  and deadline_order<daystaken ", nativeQuery = true)
 	List<OrderReport> getAllOrderDeadlineManUser(@Param("tenantId") String tenantId,String userId,int year,int month);
	
 	@Query(value = "Select COUNT(CASE WHEN type != 'order' OR type is null THEN 1 END) from tbl_ticket where manufacturer_id=:userId ",nativeQuery = true)
 	Integer manufacturerDashBoardTicket(String userId);
 	
 	@Query(value = "Select Count(*) from tbl_ticket where manufacturer_id=:userId and type='order' ",nativeQuery = true)
	Integer manufacturerDashBoardOrder(String userId);
 	@Query(value = "Select Count(*) from tbl_returns where manufacturer=:userId  ",nativeQuery = true)
 	Integer manufacturerDashBoardReturns(String userId);
 	
 	
 	
 	@Query(value="SELECT te.tenant_name,COUNT(CASE WHEN t.type != 'order' OR t.type IS NULL THEN 1 END) AS nonOrderCount,COUNT(CASE WHEN t.type = 'order' THEN 1 END) AS orderCount,COALESCE(r.returns_count, 0) AS returnsCount FROM tbl_ticket t LEFT JOIN tbl_tenant te ON te.tenant_id = t.tenant_id LEFT JOIN (SELECT r.tenant_id, COUNT(*) AS returns_count FROM tbl_returns r WHERE r.manufacturer=:userId GROUP BY r.tenant_id) r ON r.tenant_id = t.tenant_id WHERE t.manufacturer_id =:userId  GROUP BY  te.tenant_name, r.returns_count ",nativeQuery = true)
 	List<Object[]>  manufacturerDashBoard(String userId);
 	
 	
 	
 	
    
    
}
