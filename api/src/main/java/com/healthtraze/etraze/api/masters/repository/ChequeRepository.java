package com.healthtraze.etraze.api.masters.repository;

import java.math.BigInteger;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.healthtraze.etraze.api.masters.dto.ChequeDropDownDTO;
import com.healthtraze.etraze.api.masters.dto.ChequeListDTO;
import com.healthtraze.etraze.api.masters.model.Cheque;

@Repository
public interface ChequeRepository extends JpaRepository<Cheque, Long> {

    @Query(value = "select * from tbl_cheques where status = :status And sap_id = :sapId And stockist_id=:id And tenant_id=:tenantId order by recive_date" , nativeQuery = true)
    List<Cheque> getChequeByStatus(@Param("id") String id, @Param("sapId") String sapId,@Param("status") String status,@Param("tenantId") String tenantId);
    
    @Query(value = "SELECT a.stockist_id AS stockistId, a.stockist_name AS stockistName, d.sap_id as sapId,m.manufacturer_name as manufacture, d.cheque_category AS chequeCategory,d.threshold as threshold, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.status ='INWARD' THEN 1 ELSE 0 END), 0) AS total, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=true and c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS isHold, COALESCE(SUM(CASE WHEN  c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.isreturned=false And c.status = 'SECURITY' THEN 1 ELSE 0 END), 0) AS security, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=false And c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS balance FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id left join tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture left join tbl_manufacturer m ON m.manufacturer_id = d.manufacture WHERE a.tenant_id =:tenantId And d.isenable=true And d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND a.city_id ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% AND a.status ILIKE %:status% GROUP BY a.stockist_id, a.stockist_name, d.sap_id,m.manufacturer_name,d.threshold ,d.cheque_category",
            nativeQuery = true)
    List<Object[]> findChequeByStockist(@Param("tenantId") String tenantId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,@Param("status") String status ,Pageable paging);
    
    @Query(value = "SELECT a.stockist_id AS stockistId, a.stockist_name AS stockistName, d.sap_id as sapId,m.manufacturer_name as manufacture, d.cheque_category AS chequeCategory,d.threshold as threshold, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.status ='INWARD' THEN 1 ELSE 0 END), 0) AS total, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=true and c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS isHold, COALESCE(SUM(CASE WHEN  c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.isreturned=false And c.status = 'SECURITY' THEN 1 ELSE 0 END), 0) AS security, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=false And c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS balance FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id left join tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture left join tbl_manufacturer m ON m.manufacturer_id = d.manufacture WHERE a.tenant_id =:tenantId And d.isenable=true And d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND a.city_id ILIKE %:loc% AND a.status ILIKE %:status% AND a.stockist_name ILIKE %:stk% GROUP BY a.stockist_id, a.stockist_name, d.sap_id,m.manufacturer_name,d.threshold ,d.cheque_category",
            nativeQuery = true)
    List<Object[]> findChequeByStockist(@Param("tenantId") String tenantId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,@Param("status") String status);
    
    
    @Query(value = "SELECT a.stockist_id AS stockistId, a.stockist_name AS stockistName, d.sap_id as sapId,m.manufacturer_name, d.cheque_category AS chequeCategory,d.threshold as threshold, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.status ='INWARD' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS total, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=true and c.status = 'INWARD' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS isHold, COALESCE(SUM(CASE WHEN  c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.isreturned=false And c.status = 'SECURITY' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS security, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=false And c.status = 'INWARD' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS balance,a.city_id As city FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id left join tbl_bank bk on bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id left join tbl_manager_manufacturer_mapping e ON e.manufacturerid=d.manufacture left join tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture left join tbl_manufacturer m ON m.manufacturer_id = d.manufacture WHERE a.tenant_id =:tenantId And user_id =:userId AND d.isenable=true AND tm.status='ACTIVE' AND m.status='ACTIVE' AND d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND a.city_id ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% GROUP BY a.stockist_id, a.stockist_name, d.sap_id,m.manufacturer_name,d.threshold ,d.cheque_category,a.city_id",
            nativeQuery = true)
    List<Object[]> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,Pageable paging);
    
    
//    @Query(value = "SELECT a.stockist_id AS stockistId, a.stockist_name AS stockistName, d.sap_id AS sapId, m.manufacturer_name, d.cheque_category AS chequeCategory, d.threshold AS threshold, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS total, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS isHold, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' AND bk.status = 'ACTIVE') AS security, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = false AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS balance, cy.city_name AS city, a.status FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_bank bk ON bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id =:tenantId And user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE' AND a.status=:sts  AND m.status='ACTIVE' AND d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND cy.city_code ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% GROUP BY a.stockist_id, a.stockist_name, d.sap_id, m.manufacturer_name, d.threshold, d.cheque_category, cy.city_name, a.status",
//            nativeQuery = true)
//    List<Object[]> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,@Param("sts") String sts,Pageable paging);
    
    
    @Query(value = "SELECT \r\n"
    		+ "a.stockist_id AS stockistId, a.stockist_name AS stockistName,a.status AS status ,d.sap_id AS sapId, m.manufacturer_name AS manufacturerName,\r\n"
    		+ "d.cheque_category AS chequeCategory, cy.city_name AS city ,\r\n"
    		+ "coalesce(v.total,0) as total,coalesce(v.inhand,0) as inhand,coalesce(v.hold,0) as hold,coalesce(v.security,0) as security\r\n"
    		+ "FROM tbl_stockist a\r\n"
    		+ "LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id\r\n"
    		+ "LEFT JOIN cheque_list_view v ON v.stockistid = d.stockist_id AND v.sapid = d.sap_id\r\n"
    		+ "LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture \r\n"
    		+ "LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture \r\n"
    		+ "LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture\r\n"
    		+ "LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id =:tenantId And user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE' AND a.status=:sts  AND m.status='ACTIVE' AND d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND cy.city_code ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% GROUP BY a.stockist_id, a.stockist_name,a.status, d.sap_id, m.manufacturer_name,d.cheque_category, cy.city_name ,v.total,v.inhand,v.hold,v.security",
            nativeQuery = true)
    Page<ChequeListDTO> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,@Param("sts") String sts,Pageable paging);
    
    
    @Query(value = "SELECT a.stockist_id AS stockistId, a.stockist_name AS stockistName, d.sap_id as sapId,m.manufacturer_name, d.cheque_category AS chequeCategory,d.threshold as threshold, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.status ='INWARD' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS total, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=true and c.status = 'INWARD' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS isHold, COALESCE(SUM(CASE WHEN  c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.isreturned=false And c.status = 'SECURITY' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS security, COALESCE(SUM(CASE WHEN c.sap_id =d.sap_id And a.stockist_id = d.stockist_id And c.ischequehold=false And c.status = 'INWARD' and bk.status='ACTIVE' THEN 1 ELSE 0 END), 0) AS balance,a.city_id As city FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id left join tbl_bank bk on bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id left join tbl_manager_manufacturer_mapping e ON e.manufacturerid=d.manufacture left join tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture left join tbl_manufacturer m ON m.manufacturer_id = d.manufacture WHERE a.tenant_id =:tenantId And e.user_id =:userId AND d.isenable=true AND tm.status='ACTIVE' AND m.status='ACTIVE' AND d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND a.city_id ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% GROUP BY a.stockist_id, a.stockist_name, d.sap_id,m.manufacturer_name,d.threshold ,d.cheque_category,a.city_id",
            nativeQuery = true)
    List<Object[]> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap);
    
//    @Query(value = "SELECT sum((SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.status = 'INWARD' AND bk.status = 'ACTIVE')) AS total,sum((SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' AND bk.status = 'ACTIVE')) AS isHold, sum((SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' AND bk.status = 'ACTIVE')) AS security,sum((SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = false AND c.status = 'INWARD' AND bk.status = 'ACTIVE')) AS balance FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_bank bk ON bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture AND tm.tenant_id =:tenantId LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id =:tenantId And e.user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE' AND a.status=:sts  AND m.status='ACTIVE' AND d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND cy.city_code ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% ",
//            nativeQuery = true)
//    List<Object[]> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,@Param("sts") String sts);
    
    @Query(value = "SELECT SUM(total) AS total_sum, SUM(isHold) AS isHold_sum, SUM(security) AS security_sum, SUM(balance) AS balance_sum FROM (SELECT (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS total, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS isHold, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' AND bk.status = 'ACTIVE') AS security, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = false AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS balance FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_bank bk ON bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id =:tenantId And user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE' AND a.status='ACTIVE'  AND m.status='ACTIVE' GROUP BY a.stockist_id, a.stockist_name, d.sap_id, m.manufacturer_name, d.threshold, d.cheque_category, cy.city_name, a.status) AS subquery_alias", nativeQuery = true)
    List<Object[]> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId);
    
    
    @Query(value = "SELECT count(DISTINCT d.sap_id) FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_bank bk ON bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture AND tm.tenant_id =:tenantId LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id =:tenantId And e.user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE' AND a.status=:sts  AND m.status='ACTIVE' AND d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND cy.city_code ILIKE %:loc%  AND a.stockist_name ILIKE %:stk% ",
            nativeQuery = true)
    BigInteger findChequeCountByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("stk") String stk,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap,@Param("sts") String sts);
    
    
    @Query(value = "SELECT(SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND ((EXTRACT(YEAR FROM c.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM c.created_on) = EXTRACT(MONTH FROM CURRENT_DATE)) ) AND a.stockist_id = c.stockist_id AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS total,(SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND ((EXTRACT(YEAR FROM c.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM c.created_on) = EXTRACT(MONTH FROM CURRENT_DATE))) AND a.stockist_id = c.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS isHold,(SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND ((EXTRACT(YEAR FROM c.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM c.created_on) = EXTRACT(MONTH FROM CURRENT_DATE))) AND a.stockist_id = c.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' AND bk.status = 'ACTIVE') AS security,(SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND ((EXTRACT(YEAR FROM c.created_on) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM c.created_on) = EXTRACT(MONTH FROM CURRENT_DATE)) ) AND a.stockist_id = c.stockist_id AND c.ischequehold = false AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS balance FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_bank bk ON bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id =:tenantId And user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND   m.status = 'ACTIVE' AND a.status=:sts  AND m.status='ACTIVE' GROUP BY a.stockist_id, a.stockist_name, d.sap_id, m.manufacturer_name, d.threshold, d.cheque_category, cy.city_name, a.status",
            nativeQuery = true)
    List<Object[]> findChequeByManager(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("sts") String sts);
    
    
    @Query(value = "SELECT (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS total, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS isHold, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' AND bk.status = 'ACTIVE') AS security, (SELECT COALESCE(SUM(1), 0) FROM tbl_cheques c LEFT JOIN tbl_bank bk ON bk.code = c.bank_id WHERE c.sap_id = d.sap_id AND a.stockist_id = c.stockist_id AND c.ischequehold = false AND c.status = 'INWARD' AND bk.status = 'ACTIVE') AS balance, a.status FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_bank bk ON bk.code = c.bank_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_manager_manufacturer_mapping e ON e.manufacturerid = d.manufacture LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id = d.manufacture LEFT JOIN tbl_manufacturer m ON m.manufacturer_id = d.manufacture LEFT JOIN tbl_city cy ON cy.city_code = a.city_id WHERE a.tenant_id = :tenantId And e.user_id =:userId AND d.isenable = true AND tm.status = 'ACTIVE' AND m.status = 'ACTIVE' AND a.status=:sts AND m.status='ACTIVE'",nativeQuery = true)
    List<Object[]> findChequeByManagerCount(@Param("tenantId") String tenantId,@Param("userId") String userId,@Param("sts") String sts);


    @Query(value = "select * from tbl_cheques c left join tbl_bank b on c.bank_id =b.code  where c.tenant_id=:tenantId and stockist_id = :stockistId And sap_id = :sapId and b.status='ACTIVE'",nativeQuery = true)
    public List<Cheque> findByStockistId(@Param("stockistId") String stockistId,@Param("sapId") String sapId,@Param ("tenantId") String tenantId);
    
    @Query(value = "select * from tbl_cheques c left join tbl_bank b on c.bank_id =b.code  where c.tenant_id=:tenantId and stockist_id = :stockistId And sap_id = :sapId and b.status='ACTIVE' and c.status ='INWARD' and (c.cheque_number ILIKE %:search%) order by c.cheque_id asc",nativeQuery = true)
    public Page<Cheque> findByStockistIdForAdvance(@Param("stockistId") String stockistId,@Param("sapId") String sapId,@Param ("tenantId") String tenantId, Pageable paging, String search);
    
    @Query(value = "select * from tbl_cheques c left join tbl_bank b on c.bank_id =b.code  where c.tenant_id=:tenantId and stockist_id = :stockistId And sap_id = :sapId and b.status='ACTIVE' and c.status ='SECURITY' and (c.cheque_number ILIKE %:search%) order by c.cheque_id asc",nativeQuery = true)
    public Page<Cheque> findByStockistIdForSecurity(@Param("stockistId") String stockistId,@Param("sapId") String sapId,@Param ("tenantId") String tenantId, Pageable paging, String search);
    
    @Query(value = "select * from tbl_cheques c left join tbl_bank b on c.bank_id =b.code  where c.tenant_id=:tenantId and stockist_id = :stockistId And sap_id = :sapId and b.status='ACTIVE' and c.status ='CANCELLED' and (c.cheque_number ILIKE %:search%) order by c.cheque_id asc",nativeQuery = true)
    public Page<Cheque> findByStockistIdForCancel(@Param("stockistId") String stockistId,@Param("sapId") String sapId,@Param ("tenantId") String tenantId, Pageable paging, String search);    
    
    @Query(value = "select * from tbl_cheques c left join tbl_bank b on c.bank_id =b.code  where c.tenant_id=:tenantId and stockist_id = :stockistId And sap_id = :sapId and b.status='ACTIVE' and c.status ='OUTWARD' and (c.cheque_number ILIKE %:search%) order by c.cheque_id asc",nativeQuery = true)
    public Page<Cheque> findByStockistIdForOutward(@Param("stockistId") String stockistId,@Param("sapId") String sapId,@Param ("tenantId") String tenantId, Pageable paging, String search);    
    
    @Query(value = "SELECT a.stockist_id AS stockistId,a.stockist_name AS stockistName,d.sap_id AS sapId,m.manufacturer_name AS manufacture,d.cheque_category AS chequeCategory,d.threshold AS threshold,COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id And a.stockist_id = d.stockist_id AND c.status='INWARD' THEN 1 ELSE 0 END), 0) AS total, COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id And a.stockist_id = d.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS isHold,COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id And a.stockist_id = d.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' THEN 1 ELSE 0 END), 0) AS security,COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id AND a.stockist_id = d.stockist_id And c.ischequehold = false AND c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS balance, a.city_id AS city FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id=d.manufacture left join tbl_manufacturer m ON m.manufacturer_id=d.manufacture WHERE a.tenant_id = :tenantId  AND a.stockist_id = :stockistId AND (d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND a.city_id ILIKE %:loc% ) GROUP BY a.stockist_id, a.stockist_name, d.sap_id, m.manufacturer_name, d.threshold, d.cheque_category, a.city_id",nativeQuery = true)
    public List<Object[]> getSockistCheque(@Param("tenantId") String tenantId,@Param("stockistId") String stockistId,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap, Pageable paging);
    
    @Query(value = "SELECT a.stockist_id AS stockistId,a.stockist_name AS stockistName,d.sap_id AS sapId,m.manufacturer_name AS manufacture,d.cheque_category AS chequeCategory,d.threshold AS threshold,COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id And a.stockist_id = d.stockist_id AND c.status='INWARD' THEN 1 ELSE 0 END), 0) AS total, COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id And a.stockist_id = d.stockist_id AND c.ischequehold = true AND c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS isHold,COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id And a.stockist_id = d.stockist_id AND c.isreturned = false AND c.status = 'SECURITY' THEN 1 ELSE 0 END), 0) AS security,COALESCE(SUM(CASE WHEN c.sap_id = d.sap_id AND a.stockist_id = d.stockist_id And c.ischequehold = false AND c.status = 'INWARD' THEN 1 ELSE 0 END), 0) AS balance, a.city_id AS city FROM tbl_stockist a LEFT JOIN tbl_cheques c ON a.stockist_id = c.stockist_id LEFT JOIN tbl_stockist_manufacture d ON a.stockist_id = d.stockist_id LEFT JOIN tbl_tenant_manufacture tm ON tm.manufacturer_id=d.manufacture left join tbl_manufacturer m ON m.manufacturer_id=d.manufacture WHERE a.tenant_id = :tenantId  AND a.stockist_id = :stockistId AND (d.sap_id ILIKE %:sap% AND d.manufacture ILIKE %:man% AND a.city_id ILIKE %:loc% ) GROUP BY a.stockist_id, a.stockist_name, d.sap_id, m.manufacturer_name, d.threshold, d.cheque_category, a.city_id",nativeQuery = true)
    public List<Object[]> getSockistCheque(@Param("tenantId") String tenantId,@Param("stockistId") String stockistId,@Param("loc") String loc,@Param("man") String man,@Param("sap") String sap);
    
    @Query(value = "select * from tbl_cheques where cheque_number = :chequeNumber and tenant_id =:tenantId",nativeQuery = true)
    public Optional<Cheque> findByChequeNumber(@Param("chequeNumber") String chequeNumber,@Param ("tenantId") String tenantId);
    
    @Query(value = "select * from tbl_cheques where cheque_number = :chequeNumber AND stockist_id=:stockistId and tenant_id=:tenantId",nativeQuery = true)
    public List<Cheque> findByChequeNumber(@Param("chequeNumber") String chequeNumber,@Param("stockistId") String stockistId,@Param ("tenantId") String tenantId);
    
    @Query(value = "select * from tbl_cheques where cheque_number = :chequeNumber And bank_id = :bankId and tenant_id=:tenantId",nativeQuery = true)
    public Optional<Cheque> findChequeByNumberAndBankId(@Param("chequeNumber") String chequeNumber,@Param("bankId") String bankId,@Param ("tenantId") String tenantId);
    
    @Query(value = "select * from tbl_cheques where cheque_number = :chequeNumber And bank_id = :bankId and tenant_id=:tenantId and sap_id =:sapId and stockist_id =:stockistId",nativeQuery = true)
    public Optional<Cheque> findChequeByNumberAndBankId(@Param("chequeNumber") String chequeNumber,@Param("bankId") String bankId,@Param ("tenantId") String tenantId ,@Param("sapId") String sapId,@Param ("stockistId") String stockistId );

    
    @Query(value = "select * from tbl_cheques where cheque_number = :chequeNumber And bank_id = :bankId and tenant_id=:tenantId and status='INWARD'",nativeQuery = true)
    public Optional<Cheque> findByChequeNumberAndBank(@Param("chequeNumber") String chequeNumber,@Param("bankId") String bankId,@Param ("tenantId") String tenantId);

    @Query(value = "SELECT COALESCE(SUM(CASE WHEN sap_id =:sapId And ischequehold=false And isreturned=false And status='INWARD' THEN 1 ELSE 0 END), 0) AS balance FROM tbl_cheques WHERE tenant_id=:tenantId",nativeQuery = true)
    public int chequeInHand(@Param("sapId") String sapId,@Param ("tenantId") String tenantId);
    
    
    @Query(value = "select * from tbl_cheques where cheque_id = :chequeId And tenant_id = :tenantId",nativeQuery = true)
    public Optional<Cheque> findChequeByTenant(@Param("chequeId") Long chequeId,@Param("tenantId") String tenantId);
    
    
    @Query(value = "select distinct c.cheque_id AS chequeId,c.cheque_number AS chequeNumber,bk.name AS bankName from tbl_cheques c LEFT JOIN tbl_stockist_manufacture sm ON c.stockist_id = sm.stockist_id left join tbl_manager_manufacturer_mapping mm ON mm.manufacturerid=sm.manufacture left join tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id =:tenantId left join tbl_manufacturer m ON m.manufacturer_id = sm.manufacture left join tbl_bank bk on bk.code = c.bank_id where c.tenant_id = :tenantId AND mm.user_id=:userId AND sm.isenable=true AND tm.status='ACTIVE' AND m.status='ACTIVE'  AND bk.status='ACTIVE' ORDER BY c.cheque_id ASC ",nativeQuery = true)
    public List<ChequeDropDownDTO> getAllChequeNumberByUser(@Param("userId") String userId,@Param("tenantId") String tenantId);
    
//    @Query(value = "select c.cheque_id AS chequeId,c.cheque_number AS chequeNumber,bk.name AS bankName from tbl_cheques c left join tbl_bank bk on bk.code = c.bank_id where c.tenant_id = :tenantId AND c.sap_id IN (:sapId) AND bk.status='ACTIVE' ORDER BY c.cheque_id ASC ",nativeQuery = true)
//    public List<Object[]> getAllChequeNumberByUsers(List<String> sapId,@Param("tenantId") String tenantId);
    
    @Query(value = "select c.cheque_id AS chequeId,c.cheque_number AS chequeNumber,bk.name AS bankName from tbl_cheques c left join tbl_bank bk on bk.code = c.bank_id where c.tenant_id = :tenantId AND c.cheque_number ILIKE :number AND c.sap_id IN (:sapId) AND bk.status='ACTIVE' ORDER BY c.cheque_id ASC ",nativeQuery = true)
    public List<Object[]> getAllChequeNumberByUsers(List<String> sapId,@Param("tenantId") String tenantId,@Param("number") String number);
    
    @Query(value = "select distinct c.cheque_id,c.cheque_number,bk.name from tbl_cheques c LEFT JOIN tbl_stockist_manufacture sm ON c.stockist_id = sm.stockist_id left join tbl_tenant_manufacture tm ON tm.manufacturer_id = sm.manufacture AND tm.tenant_id =:tenantId left join tbl_manufacturer m ON m.manufacturer_id = sm.manufacture left join tbl_bank bk on bk.code = c.bank_id where c.tenant_id = :tenantId AND c.cheque_number ILIKE :number AND c.stockist_id=:stockistId AND sm.isenable=true AND tm.status='ACTIVE' AND m.status='ACTIVE'  AND bk.status='ACTIVE' ORDER BY c.cheque_id ASC",nativeQuery = true)
    public List<Object[]> getAllChequeNumberByStockist(@Param("stockistId") String stockistId,@Param("tenantId") String tenantId,@Param("number") String number);

	Optional<Cheque> findByStatus(String cheque);
	
	@Query(value = "select inhand from cheque_list_view  where sapid =:sapId and stockistid =:stockistId ",nativeQuery = true)
    public BigInteger getInHandChequeCount( String stockistId, String sapId);



	

}